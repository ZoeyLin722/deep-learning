{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "85c15f62",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "85c15f62",
        "outputId": "220dac89-c3c5-451a-b0c0-a40f229ed71a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting torchmetrics\n",
            "  Downloading torchmetrics-1.6.0-py3-none-any.whl.metadata (20 kB)\n",
            "Requirement already satisfied: numpy>1.20.0 in /usr/local/lib/python3.10/dist-packages (from torchmetrics) (1.26.4)\n",
            "Requirement already satisfied: packaging>17.1 in /usr/local/lib/python3.10/dist-packages (from torchmetrics) (24.2)\n",
            "Requirement already satisfied: torch>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from torchmetrics) (2.5.1+cu121)\n",
            "Collecting lightning-utilities>=0.8.0 (from torchmetrics)\n",
            "  Downloading lightning_utilities-0.11.9-py3-none-any.whl.metadata (5.2 kB)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from lightning-utilities>=0.8.0->torchmetrics) (75.1.0)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from lightning-utilities>=0.8.0->torchmetrics) (4.12.2)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=2.0.0->torchmetrics) (3.16.1)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=2.0.0->torchmetrics) (3.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=2.0.0->torchmetrics) (3.1.4)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch>=2.0.0->torchmetrics) (2024.10.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.10/dist-packages (from torch>=2.0.0->torchmetrics) (1.13.1)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy==1.13.1->torch>=2.0.0->torchmetrics) (1.3.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=2.0.0->torchmetrics) (3.0.2)\n",
            "Downloading torchmetrics-1.6.0-py3-none-any.whl (926 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m926.4/926.4 kB\u001b[0m \u001b[31m11.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading lightning_utilities-0.11.9-py3-none-any.whl (28 kB)\n",
            "Installing collected packages: lightning-utilities, torchmetrics\n",
            "Successfully installed lightning-utilities-0.11.9 torchmetrics-1.6.0\n"
          ]
        }
      ],
      "source": [
        "!pip install torchmetrics"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n",
        "from transformers import BertTokenizer, BertForSequenceClassification\n",
        "from transformers import GPT2Tokenizer, GPT2ForSequenceClassification, GPT2Config\n",
        "from sklearn.model_selection import train_test_split\n",
        "import torch.nn.functional as F\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "from tabulate import tabulate\n",
        "from tqdm import trange\n",
        "import random\n",
        "from torchmetrics.classification import Recall, Accuracy, AUROC, Precision"
      ],
      "metadata": {
        "id": "X0F_Ydxvi2fe"
      },
      "id": "X0F_Ydxvi2fe",
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "FILL = \"FILL\""
      ],
      "metadata": {
        "id": "9GPs9grPgTzU"
      },
      "id": "9GPs9grPgTzU",
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "3678adfa",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3678adfa",
        "outputId": "97d7a157-c861-45b4-9957-d7d82b9f7de4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2024-12-11 00:24:04--  https://archive.ics.uci.edu/ml/machine-learning-databases/00228/smsspamcollection.zip\n",
            "Resolving archive.ics.uci.edu (archive.ics.uci.edu)... 128.195.10.252\n",
            "Connecting to archive.ics.uci.edu (archive.ics.uci.edu)|128.195.10.252|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: unspecified\n",
            "Saving to: ‘smsspamcollection.zip’\n",
            "\n",
            "\rsmsspamcollection.z     [<=>                 ]       0  --.-KB/s               \rsmsspamcollection.z     [ <=>                ] 198.65K  --.-KB/s    in 0.03s   \n",
            "\n",
            "2024-12-11 00:24:04 (5.90 MB/s) - ‘smsspamcollection.zip’ saved [203415]\n",
            "\n",
            "Archive:  smsspamcollection.zip\n",
            "  inflating: SMSSpamCollection       \n",
            "  inflating: readme                  \n"
          ]
        }
      ],
      "source": [
        "!wget 'https://archive.ics.uci.edu/ml/machine-learning-databases/00228/smsspamcollection.zip'\n",
        "!unzip -o smsspamcollection.zip"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "d892553d",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d892553d",
        "outputId": "004eb75d-6f93-4b55-9c2b-dc73bfee2557"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  smsspamcollection.zip\n",
            "  inflating: SMSSpamCollection       \n",
            "  inflating: readme                  \n"
          ]
        }
      ],
      "source": [
        "!unzip -o smsspamcollection.zip"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "dd3d5e84",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dd3d5e84",
        "outputId": "c876d3c2-86ba-47d6-c5ab-e4f628c44466"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ham\tGo until jurong point, crazy.. Available only in bugis n great world la e buffet... Cine there got amore wat...\n",
            "ham\tOk lar... Joking wif u oni...\n",
            "spam\tFree entry in 2 a wkly comp to win FA Cup final tkts 21st May 2005. Text FA to 87121 to receive entry question(std txt rate)T&C's apply 08452810075over18's\n",
            "ham\tU dun say so early hor... U c already then say...\n",
            "ham\tNah I don't think he goes to usf, he lives around here though\n",
            "spam\tFreeMsg Hey there darling it's been 3 week's now and no word back! I'd like some fun you up for it still? Tb ok! XxX std chgs to send, £1.50 to rcv\n",
            "ham\tEven my brother is not like to speak with me. They treat me like aids patent.\n",
            "ham\tAs per your request 'Melle Melle (Oru Minnaminunginte Nurungu Vettam)' has been set as your callertune for all Callers. Press *9 to copy your friends Callertune\n",
            "spam\tWINNER!! As a valued network customer you have been selected to receivea £900 prize reward! To claim call 09061701461. Claim code KL341. Valid 12 hours only.\n",
            "spam\tHad your mobile 11 months or more? U R entitled to Update to the latest colour mobiles with camera for Free! Call The Mobile Update Co FREE on 08002986030\n"
          ]
        }
      ],
      "source": [
        "!head -10 SMSSpamCollection"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "9b12150d",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9b12150d",
        "outputId": "b86a17be-cc80-4448-d1c5-66b8d0c9d686"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2024-12-11 00:24:05--  https://archive.ics.uci.edu/ml/machine-learning-databases/00228/smsspamcollection.zip\n",
            "Resolving archive.ics.uci.edu (archive.ics.uci.edu)... 128.195.10.252\n",
            "Connecting to archive.ics.uci.edu (archive.ics.uci.edu)|128.195.10.252|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: unspecified\n",
            "Saving to: ‘smsspamcollection.zip.1’\n",
            "\n",
            "\rsmsspamcollection.z     [<=>                 ]       0  --.-KB/s               \rsmsspamcollection.z     [ <=>                ] 198.65K  --.-KB/s    in 0.03s   \n",
            "\n",
            "2024-12-11 00:24:05 (5.78 MB/s) - ‘smsspamcollection.zip.1’ saved [203415]\n",
            "\n",
            "Archive:  smsspamcollection.zip\n",
            "  inflating: SMSSpamCollection       \n",
            "  inflating: readme                  \n"
          ]
        }
      ],
      "source": [
        "!wget 'https://archive.ics.uci.edu/ml/machine-learning-databases/00228/smsspamcollection.zip'\n",
        "!unzip -o smsspamcollection.zip"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "98a736a1",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "98a736a1",
        "outputId": "0eae7f5b-34b8-4667-9f12-fbaa16141e36"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   label                                               text\n",
              "0      0  Go until jurong point, crazy.. Available only ...\n",
              "1      0                    Ok lar... Joking wif u oni...\\n\n",
              "2      1  Free entry in 2 a wkly comp to win FA Cup fina...\n",
              "3      0  U dun say so early hor... U c already then say...\n",
              "4      0  Nah I don't think he goes to usf, he lives aro..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3bc8f831-2e06-452b-9f01-c72892189685\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>label</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>Ok lar... Joking wif u oni...\\n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>U dun say so early hor... U c already then say...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3bc8f831-2e06-452b-9f01-c72892189685')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3bc8f831-2e06-452b-9f01-c72892189685 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3bc8f831-2e06-452b-9f01-c72892189685');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ce10eeee-1b03-4fd0-827d-f9ba5442c4f6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ce10eeee-1b03-4fd0-827d-f9ba5442c4f6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ce10eeee-1b03-4fd0-827d-f9ba5442c4f6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5574,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5171,\n        \"samples\": [\n          \"K, makes sense, btw carlos is being difficult so you guys are gonna smoke while I go pick up the second batch and get gas\\n\",\n          \"URGENT! Your mobile No *********** WON a \\u00a32,000 Bonus Caller Prize on 02/06/03! This is the 2nd attempt to reach YOU! Call 09066362220 ASAP! BOX97N7QP, 150ppm\\n\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "file_path = 'SMSSpamCollection'\n",
        "df = pd.DataFrame({'label':int(), 'text':str()}, index = [])\n",
        "with open(file_path) as f:\n",
        "    for line in f.readlines():\n",
        "        split = line.split('\\t')\n",
        "        df = pd.concat([\n",
        "                df,\n",
        "                pd.DataFrame.from_dict({\n",
        "                    'label': [1 if split[0] == 'spam' else 0],\n",
        "                    'text': [split[1]]\n",
        "                })\n",
        "            ],\n",
        "            ignore_index=True\n",
        "        )\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "79a5cb02",
      "metadata": {
        "id": "79a5cb02"
      },
      "outputs": [],
      "source": [
        "text = df.text.values\n",
        "labels = df.label.values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "dce193a4",
      "metadata": {
        "id": "dce193a4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281,
          "referenced_widgets": [
            "1e6e85b364114cb5a947324795d31bd0",
            "3923863b8b2141c2bba6139eda818fb0",
            "782fb4f66f4e403bb0f602235a1a31cd",
            "398e9e1278bf4a2b917a35a72cbc978f",
            "b1255cea5ea44f67b98d4666ce8c7d0c",
            "47dff6a8208c4476836f4886f1f5608b",
            "5df6aff1cb1f4861a8ba4bfac4c4c6aa",
            "f40df7b70a0641c7810c5e6f8b088b67",
            "fbfebc583a9a4c6585d127162e4ed2d6",
            "da31beac41a14ad684dfbec6e418d603",
            "3c0a16c079c045ebba3a41535c6ce5fa",
            "6d6bbf638ad44e70bb7e8ca722e916c4",
            "da30e83d697f4244a578ce5ecadcfbec",
            "142facbe0c7647ab803d2db5b7d228ef",
            "7381f10e2573426d8599a397f6c76a4b",
            "e53fc75f5de54754a71331ef64ce9ced",
            "9ec7507d8be84990a710e7eb3ab096c9",
            "2e106c859136446db961a0902c48512f",
            "6412501f7fd74ce6bbd18ff4a987dbb5",
            "3c0afb17724b4e2c81ad24f4c7d6cf88",
            "ffde2c25674f4f6f93abe04a3e91d45e",
            "11c165bd3ab64f8aaf7531691f21b846",
            "772ce44972af4f0d91e503befbe0bf9f",
            "abec172d26aa4fa890e0e7f37beb7e80",
            "e7b88c0266c041368bd2637075d6c5a0",
            "a065d0d75e684a42a9f9287ffb30f678",
            "2d2c7cdf8f75405bb0b95bbca70671c4",
            "133cc042653e49079dfa96fcfe2ddecf",
            "1975810c05494ccaac8daab18f89a86f",
            "8a97e58b28f94ad9876cc9f30c15fbb2",
            "e7f909d0758648a5a2967bd8bb3ed612",
            "57ff2463686d4bd2b03087b5edce2f10",
            "1db4a00e25d64280bc7be774e1907ba3",
            "2fa3f07900204d2c8a83dcbe4360c4a4",
            "a615ccbd0a17460c8a230cc936180b50",
            "1aec23a78c084bb68d5ea06f6ed146e2",
            "5cd8594944c14469a00df85b584e2b43",
            "c1c73a437d324ea8a551084bf3c239f5",
            "81d8b08d3602496bbd2fa9526537a30f",
            "8a38df26d9754017bac2c78d920f3fcc",
            "5b7a98b98af9477593d4fdfd9e9dca90",
            "ee285aa74ed94ffab9969bcba0d5df24",
            "534631eef1f24c9bb54093f6b26037cc",
            "9fb07fb1f67047e58fe89783c1721780",
            "1649f2dc21b74cbd9e67026ddeb74067",
            "f6c2a6d971dc49b69088bae87081e95f",
            "4007a4acfc38491a85277bd43f062644",
            "abcae095c73c4084895b79e50097d61d",
            "f6bc4b1248c74b75952f28a3dd1dd7d8",
            "769f201ffe634af8996180fcfdea6943",
            "fbec0a030d8041dab86e75a6b1632477",
            "21b930274121488fa872d9aff9dbe2df",
            "2551b5491eaf4b21bd665c2c493f64bb",
            "5678d12b9fa248d49e415a750041f95a",
            "acd7bc62aec44faba6be0052929f7407"
          ]
        },
        "outputId": "d4ff7619-58a2-4db8-bf84-31e8a3c1180a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/26.0 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1e6e85b364114cb5a947324795d31bd0"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "vocab.json:   0%|          | 0.00/1.04M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6d6bbf638ad44e70bb7e8ca722e916c4"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "merges.txt:   0%|          | 0.00/456k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "772ce44972af4f0d91e503befbe0bf9f"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json:   0%|          | 0.00/1.36M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "2fa3f07900204d2c8a83dcbe4360c4a4"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/665 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1649f2dc21b74cbd9e67026ddeb74067"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Set to the GPT2Tokenizer and set lower case to True\n",
        "tokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\", do_lower_case=True)\n",
        "tokenizer.pad_token = tokenizer.eos_token\n",
        "# Set the padding to 'left' or 'right'?\n",
        "# Remember we want to use the last token's embedding to represent the entire sentence\n",
        "tokenizer.padding_side = \"left\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "id": "c00a3e7e",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c00a3e7e",
        "outputId": "45ddfcf7-d87f-462a-d5aa-a6e1e0cc3e1c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "07732584351 - Rodger Burns - MSG = We tried to call you re your reply to our sms for a free nokia mobile + free camcorder. Please call now 08000930705 for delivery tomorrow\n",
            "\n",
            "╒═══════════╤═════════════╕\n",
            "│ Tokens    │   Token IDs │\n",
            "╞═══════════╪═════════════╡\n",
            "│ 07        │        2998 │\n",
            "├───────────┼─────────────┤\n",
            "│ 73        │        4790 │\n",
            "├───────────┼─────────────┤\n",
            "│ 25        │        1495 │\n",
            "├───────────┼─────────────┤\n",
            "│ 84        │        5705 │\n",
            "├───────────┼─────────────┤\n",
            "│ 351       │       35273 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġ-        │         532 │\n",
            "├───────────┼─────────────┤\n",
            "│ ĠRod      │        6882 │\n",
            "├───────────┼─────────────┤\n",
            "│ ger       │        1362 │\n",
            "├───────────┼─────────────┤\n",
            "│ ĠBurns    │       23592 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġ-        │         532 │\n",
            "├───────────┼─────────────┤\n",
            "│ ĠMSG      │       49064 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġ=        │         796 │\n",
            "├───────────┼─────────────┤\n",
            "│ ĠWe       │         775 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġtried    │        3088 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġto       │         284 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġcall     │         869 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġyou      │         345 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġre       │         302 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġyour     │         534 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġreply    │       10971 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġto       │         284 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġour      │         674 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġsm       │         895 │\n",
            "├───────────┼─────────────┤\n",
            "│ s         │          82 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġfor      │         329 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġa        │         257 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġfree     │        1479 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġn        │         299 │\n",
            "├───────────┼─────────────┤\n",
            "│ okia      │       22903 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġmobile   │        5175 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġ+        │        1343 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġfree     │        1479 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġcam      │       12172 │\n",
            "├───────────┼─────────────┤\n",
            "│ c         │          66 │\n",
            "├───────────┼─────────────┤\n",
            "│ order     │        2875 │\n",
            "├───────────┼─────────────┤\n",
            "│ .         │          13 │\n",
            "├───────────┼─────────────┤\n",
            "│ ĠPlease   │        4222 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġcall     │         869 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġnow      │         783 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġ08       │        8487 │\n",
            "├───────────┼─────────────┤\n",
            "│ 000       │         830 │\n",
            "├───────────┼─────────────┤\n",
            "│ 930       │       45418 │\n",
            "├───────────┼─────────────┤\n",
            "│ 705       │       34801 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġfor      │         329 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġdelivery │        7585 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ġtomorrow │        9439 │\n",
            "├───────────┼─────────────┤\n",
            "│ Ċ         │         198 │\n",
            "╘═══════════╧═════════════╛\n"
          ]
        }
      ],
      "source": [
        "def print_rand_sentence():\n",
        "    '''Displays the tokens and respective IDs of a random text sample'''\n",
        "    index = random.randint(0, len(text)-1)\n",
        "    print(text[index])\n",
        "    table = np.array([tokenizer.tokenize(text[index]),\n",
        "                    tokenizer.convert_tokens_to_ids(tokenizer.tokenize(text[index]))]).T\n",
        "    print(tabulate(table,\n",
        "                 headers = ['Tokens', 'Token IDs'],\n",
        "                 tablefmt = 'fancy_grid'))\n",
        "\n",
        "print_rand_sentence()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "id": "e85d0895",
      "metadata": {
        "id": "e85d0895"
      },
      "outputs": [],
      "source": [
        "token_id = []\n",
        "attention_masks = []\n",
        "\n",
        "def preprocessing(input_text, tokenizer):\n",
        "  '''\n",
        "  Returns <class transformers.tokenization_utils_base.BatchEncoding> with the following fields:\n",
        "    - input_ids: list of token ids\n",
        "    - token_type_ids: list of token type ids\n",
        "    - attention_mask: list of indices (0,1) specifying which tokens should considered by the model (return_attention_mask = True).\n",
        "  '''\n",
        "  # Use the tokenizer and the encode_plus methods to return the right data we'll need\n",
        "  # Set max_length = 32 and return_tokens = 'pt'\n",
        "  # Set other fields to the appropriate booleans needed\n",
        "  return tokenizer.encode_plus(\n",
        "        input_text,\n",
        "        max_length=32,\n",
        "        truncation=True,\n",
        "        padding=\"max_length\",\n",
        "        return_attention_mask=True,\n",
        "        return_tensors='pt'\n",
        "    )\n",
        "\n",
        "\n",
        "for sample in text:\n",
        "    encoding_dict = preprocessing(sample, tokenizer)\n",
        "    token_id.append(encoding_dict['input_ids'])\n",
        "    attention_masks.append(encoding_dict['attention_mask'])\n",
        "\n",
        "\n",
        "# Gather all the torch_id, attention masks, and labels\n",
        "token_id = torch.cat(token_id, dim=0)\n",
        "attention_masks = torch.cat(attention_masks, dim=0)\n",
        "labels = torch.tensor(labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "id": "222e06a7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "222e06a7",
        "outputId": "9185ed78-0d71-49b9-f90e-07dcfd28dfef"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['<|endoftext|>', '<|endoftext|>', '<|endoftext|>', '<|endoftext|>', '<|endoftext|>', '<|endoftext|>', '<|endoftext|>', 'You', 'Ġhave', 'Ġwon', 'Ġ?', '1', ',', '000', 'Ġcash', 'Ġor', 'Ġa', 'Ġ?', '2', ',', '000', 'Ġprize', '!', 'ĠTo', 'Ġclaim', ',', 'Ġcall', '09', '05', '0000', '327', 'Ċ']\n",
            "╒═══════════════╤═════════════╤══════════════════╕\n",
            "│ Tokens        │   Token IDs │   Attention Mask │\n",
            "╞═══════════════╪═════════════╪══════════════════╡\n",
            "│ <|endoftext|> │       50256 │                0 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ <|endoftext|> │       50256 │                0 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ <|endoftext|> │       50256 │                0 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ <|endoftext|> │       50256 │                0 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ <|endoftext|> │       50256 │                0 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ <|endoftext|> │       50256 │                0 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ <|endoftext|> │       50256 │                0 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ You           │        1639 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ Ġhave         │         423 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ Ġwon          │        1839 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ Ġ?            │        5633 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ 1             │          16 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ ,             │          11 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ 000           │         830 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ Ġcash         │        5003 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ Ġor           │         393 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ Ġa            │         257 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ Ġ?            │        5633 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ 2             │          17 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ ,             │          11 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ 000           │         830 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ Ġprize        │       11596 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ !             │           0 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ ĠTo           │        1675 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ Ġclaim        │        1624 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ ,             │          11 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ Ġcall         │         869 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ 09            │        2931 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ 05            │        2713 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ 0000          │        2388 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ 327           │       34159 │                1 │\n",
            "├───────────────┼─────────────┼──────────────────┤\n",
            "│ Ċ             │         198 │                1 │\n",
            "╘═══════════════╧═════════════╧══════════════════╛\n"
          ]
        }
      ],
      "source": [
        "def print_rand_sentence_encoding():\n",
        "    '''Displays tokens, token IDs and attention mask of a random text sample'''\n",
        "    index = random.randint(0, len(text) - 1)\n",
        "    tokens = tokenizer.tokenize(tokenizer.decode(token_id[index]))\n",
        "    print(tokens)\n",
        "    token_ids = [i.numpy() for i in token_id[index]]\n",
        "    attention = [i.numpy() for i in attention_masks[index]]\n",
        "    table = np.array([tokens, token_ids, attention]).T\n",
        "    print(\n",
        "        tabulate(\n",
        "            table,\n",
        "            headers = ['Tokens', 'Token IDs', 'Attention Mask'],\n",
        "            tablefmt = 'fancy_grid')\n",
        "    )\n",
        "\n",
        "print_rand_sentence_encoding()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "e1c2c10b",
      "metadata": {
        "id": "e1c2c10b"
      },
      "outputs": [],
      "source": [
        "val_ratio = 0.2\n",
        "# Recommended batch size: 16, 32. See: https://arxiv.org/pdf/1810.04805.pdf\n",
        "batch_size = 16\n",
        "\n",
        "# Indices of the train and validation splits stratified by labels\n",
        "# Use train_test_split\n",
        "train_idx, val_idx = train_test_split(\n",
        "    np.arange(len(labels)), test_size=val_ratio, stratify=labels, random_state=42)\n",
        "\n",
        "# Train and validation sets\n",
        "# Set to TensorDataset\n",
        "train_set = TensorDataset(\n",
        "    token_id[train_idx], attention_masks[train_idx], labels[train_idx])\n",
        "\n",
        "val_set = TensorDataset(\n",
        "    token_id[val_idx], attention_masks[val_idx], labels[val_idx])\n",
        "\n",
        "# Prepare DataLoader\n",
        "train_dataloader = DataLoader(train_set, sampler=RandomSampler(train_set), batch_size=batch_size)\n",
        "\n",
        "validation_dataloader = DataLoader(val_set, sampler=SequentialSampler(val_set), batch_size=batch_size)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "155cdefa",
      "metadata": {
        "id": "155cdefa"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "40bcf8c4",
      "metadata": {
        "id": "40bcf8c4"
      },
      "source": [
        "### Load specific versions of the model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "id": "f85fc88e",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84,
          "referenced_widgets": [
            "f6ca9cfd90fb4e878fbccced252fb617",
            "52911434dd1440ce9b200c17916d727f",
            "da5dcafb1b604b62aaa6b5f2fff2d18c",
            "ec3cf79ac3b74b64a674ebf06e5d5d81",
            "103862cd277f4469a18f06ee7c7f80c2",
            "0caac31c83d548a99bef8735f5407f1a",
            "279d03353afd43528f9f7ef769d4e14c",
            "1a1db831d60b49bab9783c41a215befb",
            "15d7924fbc774b5d8628dac509bf63b0",
            "818b7ec3169a4e30988ef20ec326c0c2",
            "faff9213e2a347ffa285937ee27d2011"
          ]
        },
        "id": "f85fc88e",
        "outputId": "5477e990-34bf-4c09-c711-c2240e66f656"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/548M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f6ca9cfd90fb4e878fbccced252fb617"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of GPT2ForSequenceClassification were not initialized from the model checkpoint at gpt2 and are newly initialized: ['score.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        }
      ],
      "source": [
        "# Load the BertForSequenceClassification model\n",
        "# Do not ouput the attentions and all hidden states\n",
        "\n",
        "config = GPT2Config.from_pretrained(\n",
        "    \"gpt2\",\n",
        "    num_labels=2\n",
        ")\n",
        "\n",
        "# Set to 'gpt2' (the smallest GPT2 which is 120 M parameters)\n",
        "# Use the config above and set other labels as needed\n",
        "model = GPT2ForSequenceClassification.from_pretrained(\"gpt2\", config=config)\n",
        "\n",
        "# Set the pad token id to the eos token id\n",
        "model.config.pad_token_id = model.config.eos_token_id\n",
        "\n",
        "# Recommended learning rates (Adam): 5e-5, 3e-5, 2e-5\n",
        "# See: https://arxiv.org/pdf/1810.04805.pdf\n",
        "optimizer = torch.optim.AdamW(\n",
        "    model.parameters(),\n",
        "    lr = 5e-5,\n",
        "    eps = 1e-08\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c5ea7837",
      "metadata": {
        "id": "c5ea7837"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "a36b60bf",
      "metadata": {
        "id": "a36b60bf"
      },
      "source": [
        "### Set the model to the right device"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "071b1a84",
      "metadata": {
        "id": "071b1a84"
      },
      "outputs": [],
      "source": [
        "# If on GPU, do as below\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "4811b9f5",
      "metadata": {
        "id": "4811b9f5"
      },
      "outputs": [],
      "source": [
        "model = model.to(device)\n",
        "\n",
        "# Recommended number of epochs: See: https://arxiv.org/pdf/1810.04805.pdf\n",
        "epochs = 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "id": "f9f4e75e",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f9f4e75e",
        "outputId": "bdab260c-3c2e-4f60-ac26-230df42d8ffa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "transformer.wte.weight: 38597376 parameters\n",
            "transformer.wpe.weight: 786432 parameters\n",
            "transformer.h.0.ln_1.weight: 768 parameters\n",
            "transformer.h.0.ln_1.bias: 768 parameters\n",
            "transformer.h.0.attn.c_attn.weight: 1769472 parameters\n",
            "transformer.h.0.attn.c_attn.bias: 2304 parameters\n",
            "transformer.h.0.attn.c_proj.weight: 589824 parameters\n",
            "transformer.h.0.attn.c_proj.bias: 768 parameters\n",
            "transformer.h.0.ln_2.weight: 768 parameters\n",
            "transformer.h.0.ln_2.bias: 768 parameters\n",
            "transformer.h.0.mlp.c_fc.weight: 2359296 parameters\n",
            "transformer.h.0.mlp.c_fc.bias: 3072 parameters\n",
            "transformer.h.0.mlp.c_proj.weight: 2359296 parameters\n",
            "transformer.h.0.mlp.c_proj.bias: 768 parameters\n",
            "transformer.h.1.ln_1.weight: 768 parameters\n",
            "transformer.h.1.ln_1.bias: 768 parameters\n",
            "transformer.h.1.attn.c_attn.weight: 1769472 parameters\n",
            "transformer.h.1.attn.c_attn.bias: 2304 parameters\n",
            "transformer.h.1.attn.c_proj.weight: 589824 parameters\n",
            "transformer.h.1.attn.c_proj.bias: 768 parameters\n",
            "transformer.h.1.ln_2.weight: 768 parameters\n",
            "transformer.h.1.ln_2.bias: 768 parameters\n",
            "transformer.h.1.mlp.c_fc.weight: 2359296 parameters\n",
            "transformer.h.1.mlp.c_fc.bias: 3072 parameters\n",
            "transformer.h.1.mlp.c_proj.weight: 2359296 parameters\n",
            "transformer.h.1.mlp.c_proj.bias: 768 parameters\n",
            "transformer.h.2.ln_1.weight: 768 parameters\n",
            "transformer.h.2.ln_1.bias: 768 parameters\n",
            "transformer.h.2.attn.c_attn.weight: 1769472 parameters\n",
            "transformer.h.2.attn.c_attn.bias: 2304 parameters\n",
            "transformer.h.2.attn.c_proj.weight: 589824 parameters\n",
            "transformer.h.2.attn.c_proj.bias: 768 parameters\n",
            "transformer.h.2.ln_2.weight: 768 parameters\n",
            "transformer.h.2.ln_2.bias: 768 parameters\n",
            "transformer.h.2.mlp.c_fc.weight: 2359296 parameters\n",
            "transformer.h.2.mlp.c_fc.bias: 3072 parameters\n",
            "transformer.h.2.mlp.c_proj.weight: 2359296 parameters\n",
            "transformer.h.2.mlp.c_proj.bias: 768 parameters\n",
            "transformer.h.3.ln_1.weight: 768 parameters\n",
            "transformer.h.3.ln_1.bias: 768 parameters\n",
            "transformer.h.3.attn.c_attn.weight: 1769472 parameters\n",
            "transformer.h.3.attn.c_attn.bias: 2304 parameters\n",
            "transformer.h.3.attn.c_proj.weight: 589824 parameters\n",
            "transformer.h.3.attn.c_proj.bias: 768 parameters\n",
            "transformer.h.3.ln_2.weight: 768 parameters\n",
            "transformer.h.3.ln_2.bias: 768 parameters\n",
            "transformer.h.3.mlp.c_fc.weight: 2359296 parameters\n",
            "transformer.h.3.mlp.c_fc.bias: 3072 parameters\n",
            "transformer.h.3.mlp.c_proj.weight: 2359296 parameters\n",
            "transformer.h.3.mlp.c_proj.bias: 768 parameters\n",
            "transformer.h.4.ln_1.weight: 768 parameters\n",
            "transformer.h.4.ln_1.bias: 768 parameters\n",
            "transformer.h.4.attn.c_attn.weight: 1769472 parameters\n",
            "transformer.h.4.attn.c_attn.bias: 2304 parameters\n",
            "transformer.h.4.attn.c_proj.weight: 589824 parameters\n",
            "transformer.h.4.attn.c_proj.bias: 768 parameters\n",
            "transformer.h.4.ln_2.weight: 768 parameters\n",
            "transformer.h.4.ln_2.bias: 768 parameters\n",
            "transformer.h.4.mlp.c_fc.weight: 2359296 parameters\n",
            "transformer.h.4.mlp.c_fc.bias: 3072 parameters\n",
            "transformer.h.4.mlp.c_proj.weight: 2359296 parameters\n",
            "transformer.h.4.mlp.c_proj.bias: 768 parameters\n",
            "transformer.h.5.ln_1.weight: 768 parameters\n",
            "transformer.h.5.ln_1.bias: 768 parameters\n",
            "transformer.h.5.attn.c_attn.weight: 1769472 parameters\n",
            "transformer.h.5.attn.c_attn.bias: 2304 parameters\n",
            "transformer.h.5.attn.c_proj.weight: 589824 parameters\n",
            "transformer.h.5.attn.c_proj.bias: 768 parameters\n",
            "transformer.h.5.ln_2.weight: 768 parameters\n",
            "transformer.h.5.ln_2.bias: 768 parameters\n",
            "transformer.h.5.mlp.c_fc.weight: 2359296 parameters\n",
            "transformer.h.5.mlp.c_fc.bias: 3072 parameters\n",
            "transformer.h.5.mlp.c_proj.weight: 2359296 parameters\n",
            "transformer.h.5.mlp.c_proj.bias: 768 parameters\n",
            "transformer.h.6.ln_1.weight: 768 parameters\n",
            "transformer.h.6.ln_1.bias: 768 parameters\n",
            "transformer.h.6.attn.c_attn.weight: 1769472 parameters\n",
            "transformer.h.6.attn.c_attn.bias: 2304 parameters\n",
            "transformer.h.6.attn.c_proj.weight: 589824 parameters\n",
            "transformer.h.6.attn.c_proj.bias: 768 parameters\n",
            "transformer.h.6.ln_2.weight: 768 parameters\n",
            "transformer.h.6.ln_2.bias: 768 parameters\n",
            "transformer.h.6.mlp.c_fc.weight: 2359296 parameters\n",
            "transformer.h.6.mlp.c_fc.bias: 3072 parameters\n",
            "transformer.h.6.mlp.c_proj.weight: 2359296 parameters\n",
            "transformer.h.6.mlp.c_proj.bias: 768 parameters\n",
            "transformer.h.7.ln_1.weight: 768 parameters\n",
            "transformer.h.7.ln_1.bias: 768 parameters\n",
            "transformer.h.7.attn.c_attn.weight: 1769472 parameters\n",
            "transformer.h.7.attn.c_attn.bias: 2304 parameters\n",
            "transformer.h.7.attn.c_proj.weight: 589824 parameters\n",
            "transformer.h.7.attn.c_proj.bias: 768 parameters\n",
            "transformer.h.7.ln_2.weight: 768 parameters\n",
            "transformer.h.7.ln_2.bias: 768 parameters\n",
            "transformer.h.7.mlp.c_fc.weight: 2359296 parameters\n",
            "transformer.h.7.mlp.c_fc.bias: 3072 parameters\n",
            "transformer.h.7.mlp.c_proj.weight: 2359296 parameters\n",
            "transformer.h.7.mlp.c_proj.bias: 768 parameters\n",
            "transformer.h.8.ln_1.weight: 768 parameters\n",
            "transformer.h.8.ln_1.bias: 768 parameters\n",
            "transformer.h.8.attn.c_attn.weight: 1769472 parameters\n",
            "transformer.h.8.attn.c_attn.bias: 2304 parameters\n",
            "transformer.h.8.attn.c_proj.weight: 589824 parameters\n",
            "transformer.h.8.attn.c_proj.bias: 768 parameters\n",
            "transformer.h.8.ln_2.weight: 768 parameters\n",
            "transformer.h.8.ln_2.bias: 768 parameters\n",
            "transformer.h.8.mlp.c_fc.weight: 2359296 parameters\n",
            "transformer.h.8.mlp.c_fc.bias: 3072 parameters\n",
            "transformer.h.8.mlp.c_proj.weight: 2359296 parameters\n",
            "transformer.h.8.mlp.c_proj.bias: 768 parameters\n",
            "transformer.h.9.ln_1.weight: 768 parameters\n",
            "transformer.h.9.ln_1.bias: 768 parameters\n",
            "transformer.h.9.attn.c_attn.weight: 1769472 parameters\n",
            "transformer.h.9.attn.c_attn.bias: 2304 parameters\n",
            "transformer.h.9.attn.c_proj.weight: 589824 parameters\n",
            "transformer.h.9.attn.c_proj.bias: 768 parameters\n",
            "transformer.h.9.ln_2.weight: 768 parameters\n",
            "transformer.h.9.ln_2.bias: 768 parameters\n",
            "transformer.h.9.mlp.c_fc.weight: 2359296 parameters\n",
            "transformer.h.9.mlp.c_fc.bias: 3072 parameters\n",
            "transformer.h.9.mlp.c_proj.weight: 2359296 parameters\n",
            "transformer.h.9.mlp.c_proj.bias: 768 parameters\n",
            "transformer.h.10.ln_1.weight: 768 parameters\n",
            "transformer.h.10.ln_1.bias: 768 parameters\n",
            "transformer.h.10.attn.c_attn.weight: 1769472 parameters\n",
            "transformer.h.10.attn.c_attn.bias: 2304 parameters\n",
            "transformer.h.10.attn.c_proj.weight: 589824 parameters\n",
            "transformer.h.10.attn.c_proj.bias: 768 parameters\n",
            "transformer.h.10.ln_2.weight: 768 parameters\n",
            "transformer.h.10.ln_2.bias: 768 parameters\n",
            "transformer.h.10.mlp.c_fc.weight: 2359296 parameters\n",
            "transformer.h.10.mlp.c_fc.bias: 3072 parameters\n",
            "transformer.h.10.mlp.c_proj.weight: 2359296 parameters\n",
            "transformer.h.10.mlp.c_proj.bias: 768 parameters\n",
            "transformer.h.11.ln_1.weight: 768 parameters\n",
            "transformer.h.11.ln_1.bias: 768 parameters\n",
            "transformer.h.11.attn.c_attn.weight: 1769472 parameters\n",
            "transformer.h.11.attn.c_attn.bias: 2304 parameters\n",
            "transformer.h.11.attn.c_proj.weight: 589824 parameters\n",
            "transformer.h.11.attn.c_proj.bias: 768 parameters\n",
            "transformer.h.11.ln_2.weight: 768 parameters\n",
            "transformer.h.11.ln_2.bias: 768 parameters\n",
            "transformer.h.11.mlp.c_fc.weight: 2359296 parameters\n",
            "transformer.h.11.mlp.c_fc.bias: 3072 parameters\n",
            "transformer.h.11.mlp.c_proj.weight: 2359296 parameters\n",
            "transformer.h.11.mlp.c_proj.bias: 768 parameters\n",
            "transformer.ln_f.weight: 768 parameters\n",
            "transformer.ln_f.bias: 768 parameters\n",
            "score.weight: 1536 parameters\n"
          ]
        }
      ],
      "source": [
        "# Print all the layers of this GPT2 model and the number of parameters per layer\n",
        "# If this is False, fine tune just the classifier layer and leave all other GPT2 parameters alone\n",
        "# If this is True, fine tune everything\n",
        "fine_tune = True\n",
        "\n",
        "# Turn off gradients using the above\n",
        "total_parameters = 0\n",
        "for name, param in model.named_parameters():\n",
        "    print(f\"{name}: {param.numel()} parameters\")\n",
        "    total_parameters += param.numel()\n",
        "\n",
        "if not fine_tune:\n",
        "    for name, param in model.named_parameters():\n",
        "        if \"classifier\" not in name:\n",
        "            param.requires_grad = False\n",
        "\n",
        "assert(total_parameters == 124441344)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dd1c248c",
      "metadata": {
        "id": "dd1c248c"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "765fc3a1",
      "metadata": {
        "id": "765fc3a1"
      },
      "source": [
        "### Train the model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "id": "bf0b712e",
      "metadata": {
        "id": "bf0b712e"
      },
      "outputs": [],
      "source": [
        "# Use torchmetrics to set up accuracy, recall, precision, and auroc\n",
        "accuracy = Accuracy(task=\"binary\").to(model.device)\n",
        "recall = Recall(task=\"binary\").to(model.device)\n",
        "precision = Precision(task=\"binary\").to(model.device)\n",
        "auroc = AUROC(task=\"binary\").to(model.device)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "id": "084519f5",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "084519f5",
        "outputId": "ba387484-4274-488e-fbf0-7d9db89e27e7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\rEpoch:   0%|          | 0/2 [00:00<?, ?it/s]/usr/local/lib/python3.10/dist-packages/torchmetrics/utilities/prints.py:43: UserWarning: No positive samples in targets, true positive value should be meaningless. Returning zero tensor in true positive score\n",
            "  warnings.warn(*args, **kwargs)  # noqa: B028\n",
            "Epoch:  50%|█████     | 1/2 [00:38<00:38, 38.11s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\t - Train loss: 0.1381\n",
            "\t - Validation Accuracy: 0.9830\n",
            "\t - Validation Precision: 0.8429\n",
            "\t - Validation Recall: 0.7705\n",
            "\t - Validation AUROC: 0.9050\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch: 100%|██████████| 2/2 [01:15<00:00, 37.95s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\t - Train loss: 0.0373\n",
            "\t - Validation Accuracy: 0.9848\n",
            "\t - Validation Precision: 0.8400\n",
            "\t - Validation Recall: 0.8055\n",
            "\t - Validation AUROC: 0.9034\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ],
      "source": [
        "# Main training / validation loop\n",
        "for _ in trange(epochs, desc = 'Epoch'):\n",
        "\n",
        "    # ========== Training ==========\n",
        "\n",
        "    # Set model to training mode\n",
        "    model.train()\n",
        "\n",
        "    # Tracking variables\n",
        "    tr_loss = 0\n",
        "    nb_tr_examples, nb_tr_steps = 0, 0\n",
        "\n",
        "    for step, batch in enumerate(train_dataloader):\n",
        "\n",
        "        # Put each element of batch onto the device\n",
        "        batch = [t.to(device) for t in batch]\n",
        "\n",
        "        # Unpack the batch\n",
        "        b_input_ids, b_input_mask, b_labels = batch\n",
        "\n",
        "        # Set gradients to zero\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # Forward pass\n",
        "        train_output = model(input_ids=b_input_ids, attention_mask=b_input_mask, labels=b_labels)\n",
        "        loss = train_output.loss\n",
        "\n",
        "        # Backward pass\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # Update tracking variables\n",
        "        tr_loss += loss.item()\n",
        "        nb_tr_examples += b_input_ids.size(0)\n",
        "        nb_tr_steps += 1\n",
        "\n",
        "    # ========== Validation ==========\n",
        "\n",
        "    # Set model to evaluation mode\n",
        "    model.eval()\n",
        "\n",
        "    # Tracking variables\n",
        "    val_accuracy = []\n",
        "    val_precision = []\n",
        "    val_recall = []\n",
        "    val_auroc = []\n",
        "\n",
        "    for batch in validation_dataloader:\n",
        "        batch = [t.to(device) for t in batch]\n",
        "\n",
        "        # Unpack the batch\n",
        "        b_input_ids, b_input_mask, b_labels = batch\n",
        "\n",
        "        with torch.no_grad():\n",
        "          # Forward pass\n",
        "            eval_output = model(input_ids=b_input_ids, attention_mask=b_input_mask)\n",
        "\n",
        "        logits = eval_output.logits\n",
        "\n",
        "        # Calculate validation metrics\n",
        "        labels = b_labels\n",
        "        predicted_labels = torch.argmax(logits, dim=1)\n",
        "\n",
        "        val_accuracy.append(accuracy(predicted_labels, labels).item())\n",
        "        val_recall.append(recall(predicted_labels, labels).item())\n",
        "        val_precision.append(precision(predicted_labels, labels).item())\n",
        "        val_auroc.append(auroc(logits.softmax(dim=-1)[:, 1], labels).item())\n",
        "\n",
        "    print('\\n\\t - Train loss: {:.4f}'.format(tr_loss / nb_tr_steps))\n",
        "    print('\\t - Validation Accuracy: {:.4f}'.format(sum(val_accuracy)/len(val_accuracy)))\n",
        "    print('\\t - Validation Precision: {:.4f}'.format(sum(val_precision)/len(val_precision)))\n",
        "    print('\\t - Validation Recall: {:.4f}'.format(sum(val_recall)/len(val_recall)))\n",
        "    print('\\t - Validation AUROC: {:.4f}\\n'.format(sum(val_auroc)/len(val_auroc)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c029bd94",
      "metadata": {
        "id": "c029bd94"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "13d64bc6",
      "metadata": {
        "id": "13d64bc6"
      },
      "source": [
        "### Test on a specific sentence, see the outcome"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "id": "6dfcd9e7",
      "metadata": {
        "id": "6dfcd9e7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "49c001f6-9ca1-45d5-c043-7d67bf895ffa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input Sentence:  WINNER!! As a valued network customer you have been selected to receivea £900 prize reward! To claim call 09061701461. Claim code KL341. Valid 12 hours only.\n",
            "Predicted Class:  Spam\n"
          ]
        }
      ],
      "source": [
        "new_sentence = 'WINNER!! As a valued network customer you have been selected to receivea £900 prize reward! To claim call 09061701461. Claim code KL341. Valid 12 hours only.'\n",
        "\n",
        "# We need Token IDs and Attention Mask for inference on the new sentence\n",
        "test_ids = []\n",
        "test_attention_mask = []\n",
        "\n",
        "# Apply the tokenizer\n",
        "encoding = preprocessing(new_sentence, tokenizer)\n",
        "\n",
        "# Extract IDs and Attention Mask\n",
        "test_ids.append(encoding['input_ids'])\n",
        "test_attention_mask.append(encoding['attention_mask'])\n",
        "test_ids = torch.cat(test_ids, dim = 0)\n",
        "test_attention_mask = torch.cat(test_attention_mask, dim = 0)\n",
        "\n",
        "# Forward pass, calculate logit predictions\n",
        "with torch.no_grad():\n",
        "    output = model(test_ids.to(device), token_type_ids = None, attention_mask = test_attention_mask.to(device))\n",
        "\n",
        "prediction = 'Spam' if np.argmax(output.logits.cpu().numpy()).flatten().item() == 1 else 'Ham'\n",
        "\n",
        "print('Input Sentence: ', new_sentence)\n",
        "print('Predicted Class: ', prediction)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e4453061",
      "metadata": {
        "id": "e4453061",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "be0e7cc8-d15d-41c8-fa97-041dcd5fcd2e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "device(type='cuda')"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "a0c41741",
      "metadata": {
        "id": "a0c41741"
      },
      "source": [
        "### Questions"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "875fab6d",
      "metadata": {
        "id": "875fab6d"
      },
      "source": [
        "Question 1: Run the above by fine tuning GPT2 and the classfier head and by not doing this (using GPT2 as a feature encoder). What is the gap between this? What are the metrics we get in each case?"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def train_and_evaluate(model, train_dataloader, validation_dataloader, optimizer, epochs, fine_tune):\n",
        "    if not fine_tune:\n",
        "        for param in model.transformer.parameters():\n",
        "            param.requires_grad = False\n",
        "    else:\n",
        "        for param in model.parameters():\n",
        "            param.requires_grad = True\n",
        "\n",
        "    train_results = []\n",
        "    val_results = []\n",
        "\n",
        "    for epoch in range(epochs):\n",
        "        print(f\"Epoch {epoch + 1}/{epochs}\")\n",
        "\n",
        "        # ========== Training ========== #\n",
        "        model.train()\n",
        "        tr_loss, nb_tr_steps = 0, 0\n",
        "\n",
        "        for step, batch in enumerate(train_dataloader):\n",
        "            batch = [t.to(device) for t in batch]\n",
        "            b_input_ids, b_input_mask, b_labels = batch\n",
        "\n",
        "            optimizer.zero_grad()\n",
        "\n",
        "            train_output = model(input_ids=b_input_ids, attention_mask=b_input_mask, labels=b_labels)\n",
        "            loss = train_output.loss\n",
        "\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "            tr_loss += loss.item()\n",
        "            nb_tr_steps += 1\n",
        "\n",
        "        avg_train_loss = tr_loss / nb_tr_steps\n",
        "        print(f\"\\t- Training loss: {avg_train_loss:.4f}\")\n",
        "\n",
        "        # ========== Validation ========== #\n",
        "        model.eval()\n",
        "        val_accuracy, val_recall, val_precision, val_auroc = [], [], [], []\n",
        "        val_loss = 0\n",
        "\n",
        "        for batch in validation_dataloader:\n",
        "            batch = [t.to(device) for t in batch]\n",
        "            b_input_ids, b_input_mask, b_labels = batch\n",
        "\n",
        "            with torch.no_grad():\n",
        "                eval_output = model(input_ids=b_input_ids, attention_mask=b_input_mask, labels=b_labels)\n",
        "            logits = eval_output.logits\n",
        "            val_loss += eval_output.loss.item()\n",
        "\n",
        "            predicted_labels = torch.argmax(logits, dim=1)\n",
        "            val_accuracy.append(accuracy(predicted_labels, b_labels).item())\n",
        "            val_recall.append(recall(predicted_labels, b_labels).item())\n",
        "            val_precision.append(precision(predicted_labels, b_labels).item())\n",
        "            val_auroc.append(auroc(logits.softmax(dim=-1)[:, 1], b_labels).item())\n",
        "\n",
        "        avg_val_accuracy = sum(val_accuracy) / len(val_accuracy)\n",
        "        avg_val_recall = sum(val_recall) / len(val_recall)\n",
        "        avg_val_precision = sum(val_precision) / len(val_precision)\n",
        "        avg_val_auroc = sum(val_auroc) / len(val_auroc)\n",
        "        avg_val_loss = val_loss / len(validation_dataloader)\n",
        "\n",
        "        print(f\"\\t- Validation Accuracy: {avg_val_accuracy:.4f}\")\n",
        "        print(f\"\\t- Validation Recall: {avg_val_recall:.4f}\")\n",
        "        print(f\"\\t- Validation Precision: {avg_val_precision:.4f}\")\n",
        "        print(f\"\\t- Validation AUROC: {avg_val_auroc:.4f}\")\n",
        "\n",
        "        train_results.append({\n",
        "            \"train_loss\": avg_train_loss,\n",
        "        })\n",
        "        val_results.append({\n",
        "            \"val_accuracy\": avg_val_accuracy,\n",
        "            \"val_recall\": avg_val_recall,\n",
        "            \"val_precision\": avg_val_precision,\n",
        "            \"val_auroc\": avg_val_auroc,\n",
        "            \"val_loss\": avg_val_loss\n",
        "        })\n",
        "\n",
        "    return train_results, val_results\n",
        "\n",
        "print(\"\\nFine-tuning GPT-2 and Classifier Head\")\n",
        "optimizer = torch.optim.AdamW(model.parameters(), lr=5e-5, eps=1e-8)\n",
        "train_results_1, val_results_1 = train_and_evaluate(\n",
        "    model, train_dataloader, validation_dataloader, optimizer, epochs=2, fine_tune=True\n",
        ")\n",
        "\n",
        "model = GPT2ForSequenceClassification.from_pretrained(\"gpt2\", config=config).to(device)\n",
        "model.config.pad_token_id = model.config.eos_token_id\n",
        "optimizer = torch.optim.AdamW(model.parameters(), lr=5e-5, eps=1e-8)\n",
        "\n",
        "print(\"\\nUsing GPT-2 as a Feature Encoder\")\n",
        "train_results_2, val_results_2 = train_and_evaluate(\n",
        "    model, train_dataloader, validation_dataloader, optimizer, epochs, fine_tune=False\n",
        ")\n",
        "\n",
        "def calculate_gap(results_1, results_2):\n",
        "    print(\"\\nGap Analysis (Fine-Tuning vs Feature Encoder):\")\n",
        "    metrics = [\"val_accuracy\", \"val_recall\", \"val_precision\", \"val_auroc\"]\n",
        "\n",
        "    for epoch in range(len(results_1)):\n",
        "        print(f\"\\nEpoch {epoch + 1}:\")\n",
        "        for metric in metrics:\n",
        "            gap = results_1[epoch][metric] - results_2[epoch][metric]\n",
        "            print(f\"\\t{metric.title()} Gap: {gap:.4f}\")\n",
        "\n",
        "calculate_gap(val_results_1, val_results_2)"
      ],
      "metadata": {
        "id": "ZJm2R6Oasz0j",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "72571705-37ad-421d-b71f-fdb69571a332"
      },
      "id": "ZJm2R6Oasz0j",
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Fine-tuning GPT-2 and Classifier Head\n",
            "Epoch 1/2\n",
            "\t- Training loss: 0.0353\n",
            "\t- Validation Accuracy: 0.9866\n",
            "\t- Validation Recall: 0.8317\n",
            "\t- Validation Precision: 0.8590\n",
            "\t- Validation AUROC: 0.9088\n",
            "Epoch 2/2\n",
            "\t- Training loss: 0.0182\n",
            "\t- Validation Accuracy: 0.9938\n",
            "\t- Validation Recall: 0.8738\n",
            "\t- Validation Precision: 0.9000\n",
            "\t- Validation AUROC: 0.9103\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of GPT2ForSequenceClassification were not initialized from the model checkpoint at gpt2 and are newly initialized: ['score.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Using GPT-2 as a Feature Encoder\n",
            "Epoch 1/2\n",
            "\t- Training loss: 1.8843\n",
            "\t- Validation Accuracy: 0.8050\n",
            "\t- Validation Recall: 0.5917\n",
            "\t- Validation Precision: 0.3619\n",
            "\t- Validation AUROC: 0.7485\n",
            "Epoch 2/2\n",
            "\t- Training loss: 0.4180\n",
            "\t- Validation Accuracy: 0.8461\n",
            "\t- Validation Recall: 0.2579\n",
            "\t- Validation Precision: 0.3112\n",
            "\t- Validation AUROC: 0.7708\n",
            "\n",
            "Gap Analysis (Fine-Tuning vs Feature Encoder):\n",
            "\n",
            "Epoch 1:\n",
            "\tVal_Accuracy Gap: 0.1816\n",
            "\tVal_Recall Gap: 0.2400\n",
            "\tVal_Precision Gap: 0.4971\n",
            "\tVal_Auroc Gap: 0.1603\n",
            "\n",
            "Epoch 2:\n",
            "\tVal_Accuracy Gap: 0.1476\n",
            "\tVal_Recall Gap: 0.6160\n",
            "\tVal_Precision Gap: 0.5888\n",
            "\tVal_Auroc Gap: 0.1395\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ae772301",
      "metadata": {
        "id": "ae772301"
      },
      "source": [
        "Solution: FILL Paste your output here"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "071f0f80",
      "metadata": {
        "id": "071f0f80",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        },
        "outputId": "26fa6faa-f001-40b6-efd4-b42bf9e19085"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"\\nFine-tuning GPT-2 and Classifier Head\\nEpoch 1/2\\n\\t- Training loss: 0.0977\\n\\t- Validation Accuracy: 0.9848\\n\\t- Validation Recall: 0.8560\\n\\t- Validation Precision: 0.8405\\n\\t- Validation AUROC: 0.9105\\nEpoch 2/2\\n\\t- Training loss: 0.0334\\n\\t- Validation Accuracy: 0.9902\\n\\t- Validation Recall: 0.8548\\n\\t- Validation Precision: 0.8667\\n\\t- Validation AUROC: 0.9106\\nSome weights of GPT2ForSequenceClassification were not initialized from the model checkpoint at gpt2 and are newly initialized: ['score.weight']\\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\\n\\nUsing GPT-2 as a Feature Encoder\\nEpoch 1/2\\n\\t- Training loss: 2.0209\\n\\t- Validation Accuracy: 0.8238\\n\\t- Validation Recall: 0.6938\\n\\t- Validation Precision: 0.4125\\n\\t- Validation AUROC: 0.7709\\nEpoch 2/2\\n\\t- Training loss: 0.3171\\n\\t- Validation Accuracy: 0.8679\\n\\t- Validation Recall: 0.3762\\n\\t- Validation Precision: 0.4702\\n\\t- Validation AUROC: 0.7972\\n\\nGap Analysis (Fine-Tuning vs Feature Encoder):\\n\\nEpoch 1:\\n\\tVal_Accuracy Gap: 0.1610\\n\\tVal_Recall Gap: 0.1621\\n\\tVal_Precision Gap: 0.4279\\n\\tVal_Auroc Gap: 0.1396\\n\\nEpoch 2:\\n\\tVal_Accuracy Gap: 0.1222\\n\\tVal_Recall Gap: 0.4786\\n\\tVal_Precision Gap: 0.3964\\n\\tVal_Auroc Gap: 0.1134\\n\""
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "\"\"\"\n",
        "Fine-tuning GPT-2 and Classifier Head\n",
        "Epoch 1/2\n",
        "\t- Training loss: 0.0353\n",
        "\t- Validation Accuracy: 0.9866\n",
        "\t- Validation Recall: 0.8317\n",
        "\t- Validation Precision: 0.8590\n",
        "\t- Validation AUROC: 0.9088\n",
        "Epoch 2/2\n",
        "\t- Training loss: 0.0182\n",
        "\t- Validation Accuracy: 0.9938\n",
        "\t- Validation Recall: 0.8738\n",
        "\t- Validation Precision: 0.9000\n",
        "\t- Validation AUROC: 0.9103\n",
        "Some weights of GPT2ForSequenceClassification were not initialized from the model checkpoint at gpt2 and are newly initialized: ['score.weight']\n",
        "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n",
        "\n",
        "Using GPT-2 as a Feature Encoder\n",
        "Epoch 1/2\n",
        "\t- Training loss: 1.8843\n",
        "\t- Validation Accuracy: 0.8050\n",
        "\t- Validation Recall: 0.5917\n",
        "\t- Validation Precision: 0.3619\n",
        "\t- Validation AUROC: 0.7485\n",
        "Epoch 2/2\n",
        "\t- Training loss: 0.4180\n",
        "\t- Validation Accuracy: 0.8461\n",
        "\t- Validation Recall: 0.2579\n",
        "\t- Validation Precision: 0.3112\n",
        "\t- Validation AUROC: 0.7708\n",
        "\n",
        "Gap Analysis (Fine-Tuning vs Feature Encoder):\n",
        "\n",
        "Epoch 1:\n",
        "\tVal_Accuracy Gap: 0.1816\n",
        "\tVal_Recall Gap: 0.2400\n",
        "\tVal_Precision Gap: 0.4971\n",
        "\tVal_Auroc Gap: 0.1603\n",
        "\n",
        "Epoch 2:\n",
        "\tVal_Accuracy Gap: 0.1476\n",
        "\tVal_Recall Gap: 0.6160\n",
        "\tVal_Precision Gap: 0.5888\n",
        "\tVal_Auroc Gap: 0.1395\n",
        "\"\"\""
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.15"
    },
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "1e6e85b364114cb5a947324795d31bd0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3923863b8b2141c2bba6139eda818fb0",
              "IPY_MODEL_782fb4f66f4e403bb0f602235a1a31cd",
              "IPY_MODEL_398e9e1278bf4a2b917a35a72cbc978f"
            ],
            "layout": "IPY_MODEL_b1255cea5ea44f67b98d4666ce8c7d0c"
          }
        },
        "3923863b8b2141c2bba6139eda818fb0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_47dff6a8208c4476836f4886f1f5608b",
            "placeholder": "​",
            "style": "IPY_MODEL_5df6aff1cb1f4861a8ba4bfac4c4c6aa",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "782fb4f66f4e403bb0f602235a1a31cd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f40df7b70a0641c7810c5e6f8b088b67",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_fbfebc583a9a4c6585d127162e4ed2d6",
            "value": 26
          }
        },
        "398e9e1278bf4a2b917a35a72cbc978f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_da31beac41a14ad684dfbec6e418d603",
            "placeholder": "​",
            "style": "IPY_MODEL_3c0a16c079c045ebba3a41535c6ce5fa",
            "value": " 26.0/26.0 [00:00&lt;00:00, 660B/s]"
          }
        },
        "b1255cea5ea44f67b98d4666ce8c7d0c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "47dff6a8208c4476836f4886f1f5608b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5df6aff1cb1f4861a8ba4bfac4c4c6aa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f40df7b70a0641c7810c5e6f8b088b67": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fbfebc583a9a4c6585d127162e4ed2d6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "da31beac41a14ad684dfbec6e418d603": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3c0a16c079c045ebba3a41535c6ce5fa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6d6bbf638ad44e70bb7e8ca722e916c4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_da30e83d697f4244a578ce5ecadcfbec",
              "IPY_MODEL_142facbe0c7647ab803d2db5b7d228ef",
              "IPY_MODEL_7381f10e2573426d8599a397f6c76a4b"
            ],
            "layout": "IPY_MODEL_e53fc75f5de54754a71331ef64ce9ced"
          }
        },
        "da30e83d697f4244a578ce5ecadcfbec": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9ec7507d8be84990a710e7eb3ab096c9",
            "placeholder": "​",
            "style": "IPY_MODEL_2e106c859136446db961a0902c48512f",
            "value": "vocab.json: 100%"
          }
        },
        "142facbe0c7647ab803d2db5b7d228ef": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6412501f7fd74ce6bbd18ff4a987dbb5",
            "max": 1042301,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_3c0afb17724b4e2c81ad24f4c7d6cf88",
            "value": 1042301
          }
        },
        "7381f10e2573426d8599a397f6c76a4b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ffde2c25674f4f6f93abe04a3e91d45e",
            "placeholder": "​",
            "style": "IPY_MODEL_11c165bd3ab64f8aaf7531691f21b846",
            "value": " 1.04M/1.04M [00:00&lt;00:00, 5.24MB/s]"
          }
        },
        "e53fc75f5de54754a71331ef64ce9ced": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9ec7507d8be84990a710e7eb3ab096c9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2e106c859136446db961a0902c48512f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6412501f7fd74ce6bbd18ff4a987dbb5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3c0afb17724b4e2c81ad24f4c7d6cf88": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "ffde2c25674f4f6f93abe04a3e91d45e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "11c165bd3ab64f8aaf7531691f21b846": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "772ce44972af4f0d91e503befbe0bf9f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_abec172d26aa4fa890e0e7f37beb7e80",
              "IPY_MODEL_e7b88c0266c041368bd2637075d6c5a0",
              "IPY_MODEL_a065d0d75e684a42a9f9287ffb30f678"
            ],
            "layout": "IPY_MODEL_2d2c7cdf8f75405bb0b95bbca70671c4"
          }
        },
        "abec172d26aa4fa890e0e7f37beb7e80": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_133cc042653e49079dfa96fcfe2ddecf",
            "placeholder": "​",
            "style": "IPY_MODEL_1975810c05494ccaac8daab18f89a86f",
            "value": "merges.txt: 100%"
          }
        },
        "e7b88c0266c041368bd2637075d6c5a0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8a97e58b28f94ad9876cc9f30c15fbb2",
            "max": 456318,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e7f909d0758648a5a2967bd8bb3ed612",
            "value": 456318
          }
        },
        "a065d0d75e684a42a9f9287ffb30f678": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_57ff2463686d4bd2b03087b5edce2f10",
            "placeholder": "​",
            "style": "IPY_MODEL_1db4a00e25d64280bc7be774e1907ba3",
            "value": " 456k/456k [00:00&lt;00:00, 3.14MB/s]"
          }
        },
        "2d2c7cdf8f75405bb0b95bbca70671c4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "133cc042653e49079dfa96fcfe2ddecf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1975810c05494ccaac8daab18f89a86f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8a97e58b28f94ad9876cc9f30c15fbb2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e7f909d0758648a5a2967bd8bb3ed612": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "57ff2463686d4bd2b03087b5edce2f10": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1db4a00e25d64280bc7be774e1907ba3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2fa3f07900204d2c8a83dcbe4360c4a4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a615ccbd0a17460c8a230cc936180b50",
              "IPY_MODEL_1aec23a78c084bb68d5ea06f6ed146e2",
              "IPY_MODEL_5cd8594944c14469a00df85b584e2b43"
            ],
            "layout": "IPY_MODEL_c1c73a437d324ea8a551084bf3c239f5"
          }
        },
        "a615ccbd0a17460c8a230cc936180b50": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_81d8b08d3602496bbd2fa9526537a30f",
            "placeholder": "​",
            "style": "IPY_MODEL_8a38df26d9754017bac2c78d920f3fcc",
            "value": "tokenizer.json: 100%"
          }
        },
        "1aec23a78c084bb68d5ea06f6ed146e2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5b7a98b98af9477593d4fdfd9e9dca90",
            "max": 1355256,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_ee285aa74ed94ffab9969bcba0d5df24",
            "value": 1355256
          }
        },
        "5cd8594944c14469a00df85b584e2b43": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_534631eef1f24c9bb54093f6b26037cc",
            "placeholder": "​",
            "style": "IPY_MODEL_9fb07fb1f67047e58fe89783c1721780",
            "value": " 1.36M/1.36M [00:00&lt;00:00, 5.99MB/s]"
          }
        },
        "c1c73a437d324ea8a551084bf3c239f5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "81d8b08d3602496bbd2fa9526537a30f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8a38df26d9754017bac2c78d920f3fcc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5b7a98b98af9477593d4fdfd9e9dca90": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ee285aa74ed94ffab9969bcba0d5df24": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "534631eef1f24c9bb54093f6b26037cc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9fb07fb1f67047e58fe89783c1721780": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1649f2dc21b74cbd9e67026ddeb74067": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f6c2a6d971dc49b69088bae87081e95f",
              "IPY_MODEL_4007a4acfc38491a85277bd43f062644",
              "IPY_MODEL_abcae095c73c4084895b79e50097d61d"
            ],
            "layout": "IPY_MODEL_f6bc4b1248c74b75952f28a3dd1dd7d8"
          }
        },
        "f6c2a6d971dc49b69088bae87081e95f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_769f201ffe634af8996180fcfdea6943",
            "placeholder": "​",
            "style": "IPY_MODEL_fbec0a030d8041dab86e75a6b1632477",
            "value": "config.json: 100%"
          }
        },
        "4007a4acfc38491a85277bd43f062644": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_21b930274121488fa872d9aff9dbe2df",
            "max": 665,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_2551b5491eaf4b21bd665c2c493f64bb",
            "value": 665
          }
        },
        "abcae095c73c4084895b79e50097d61d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5678d12b9fa248d49e415a750041f95a",
            "placeholder": "​",
            "style": "IPY_MODEL_acd7bc62aec44faba6be0052929f7407",
            "value": " 665/665 [00:00&lt;00:00, 15.0kB/s]"
          }
        },
        "f6bc4b1248c74b75952f28a3dd1dd7d8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "769f201ffe634af8996180fcfdea6943": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fbec0a030d8041dab86e75a6b1632477": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "21b930274121488fa872d9aff9dbe2df": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2551b5491eaf4b21bd665c2c493f64bb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "5678d12b9fa248d49e415a750041f95a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "acd7bc62aec44faba6be0052929f7407": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f6ca9cfd90fb4e878fbccced252fb617": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_52911434dd1440ce9b200c17916d727f",
              "IPY_MODEL_da5dcafb1b604b62aaa6b5f2fff2d18c",
              "IPY_MODEL_ec3cf79ac3b74b64a674ebf06e5d5d81"
            ],
            "layout": "IPY_MODEL_103862cd277f4469a18f06ee7c7f80c2"
          }
        },
        "52911434dd1440ce9b200c17916d727f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0caac31c83d548a99bef8735f5407f1a",
            "placeholder": "​",
            "style": "IPY_MODEL_279d03353afd43528f9f7ef769d4e14c",
            "value": "model.safetensors: 100%"
          }
        },
        "da5dcafb1b604b62aaa6b5f2fff2d18c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1a1db831d60b49bab9783c41a215befb",
            "max": 548105171,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_15d7924fbc774b5d8628dac509bf63b0",
            "value": 548105171
          }
        },
        "ec3cf79ac3b74b64a674ebf06e5d5d81": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_818b7ec3169a4e30988ef20ec326c0c2",
            "placeholder": "​",
            "style": "IPY_MODEL_faff9213e2a347ffa285937ee27d2011",
            "value": " 548M/548M [00:05&lt;00:00, 74.7MB/s]"
          }
        },
        "103862cd277f4469a18f06ee7c7f80c2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0caac31c83d548a99bef8735f5407f1a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "279d03353afd43528f9f7ef769d4e14c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1a1db831d60b49bab9783c41a215befb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "15d7924fbc774b5d8628dac509bf63b0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "818b7ec3169a4e30988ef20ec326c0c2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "faff9213e2a347ffa285937ee27d2011": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
