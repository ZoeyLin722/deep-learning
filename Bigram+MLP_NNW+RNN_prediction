{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "624b39df",
      "metadata": {
        "id": "624b39df"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "from collections import defaultdict\n",
        "import torch.nn.functional as F\n",
        "from torch.utils.data import DataLoader, TensorDataset\n",
        "import tqdm\n",
        "import math\n",
        "from collections import defaultdict\n",
        "import torch.optim as optim"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "939a704e",
      "metadata": {
        "id": "939a704e"
      },
      "outputs": [],
      "source": [
        "FILL_IN = \"FILL_IN\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "fa935c21",
      "metadata": {
        "id": "fa935c21"
      },
      "outputs": [],
      "source": [
        "# Dictionaries, {idx -> ch} and {ch -> idx}\n",
        "itos = defaultdict(int)\n",
        "stoi = defaultdict(int)\n",
        "# Number of characters used to predict the target character in the MLP Language Model\n",
        "block_size = 3\n",
        "# Batch size used in MLP Language Model\n",
        "batch_size = 32\n",
        "# Embedding dimension, per character\n",
        "d_model = 10\n",
        "# Hidden dimension for RNN and also MLP Language Models\n",
        "d_h = 200\n",
        "\n",
        "# START = START token\n",
        "stoi['.'] = 0\n",
        "itos[0] = '.'\n",
        "\n",
        "# Loop over all names and create mappings itos and stoi mapping a unique character to a idx\n",
        "with open(\"/content/names.txt\", 'r') as file:\n",
        "    for line in file:\n",
        "        name = line.strip()\n",
        "        for ch in name:\n",
        "            if ch not in stoi:\n",
        "                idx = len(stoi)\n",
        "                stoi[ch] = idx\n",
        "                itos[idx] = ch"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "d556793e",
      "metadata": {
        "id": "d556793e"
      },
      "outputs": [],
      "source": [
        "assert len(stoi) == len(itos)\n",
        "vocab_size = len(stoi)\n",
        "assert vocab_size == 27"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "3765e0fe",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3765e0fe",
        "outputId": "47cd0257-832c-4278-ac61-80e079ca31d9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "defaultdict(int,\n",
              "            {'.': 0,\n",
              "             'e': 1,\n",
              "             'm': 2,\n",
              "             'a': 3,\n",
              "             'o': 4,\n",
              "             'l': 5,\n",
              "             'i': 6,\n",
              "             'v': 7,\n",
              "             's': 8,\n",
              "             'b': 9,\n",
              "             'p': 10,\n",
              "             'h': 11,\n",
              "             'c': 12,\n",
              "             'r': 13,\n",
              "             't': 14,\n",
              "             'y': 15,\n",
              "             'n': 16,\n",
              "             'g': 17,\n",
              "             'z': 18,\n",
              "             'f': 19,\n",
              "             'd': 20,\n",
              "             'u': 21,\n",
              "             'k': 22,\n",
              "             'w': 23,\n",
              "             'q': 24,\n",
              "             'x': 25,\n",
              "             'j': 26})"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "stoi"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d706797e",
      "metadata": {
        "id": "d706797e"
      },
      "source": [
        "## BiGram Language Model\n",
        "- Implement the Bigram Language Model\n",
        "- Get all the relevent counts, then get the train dataset Perplexity\n",
        "- Use the class notes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "9cb554a5",
      "metadata": {
        "id": "9cb554a5"
      },
      "outputs": [],
      "source": [
        "# Using the formulas in class, loop over each name and get the parameters\n",
        "c1 = defaultdict(int)\n",
        "c2 = defaultdict(int)\n",
        "for name in open('/content/names.txt', 'r'):\n",
        "    # Lowercase and remove any whitespace at the end\n",
        "    name = name.lower().strip()\n",
        "    # Pad with START = '.' and STOP = '.'\n",
        "    name = '.' + name + '.'\n",
        "    # Transform to integer\n",
        "    name = [stoi[ch] for ch in name]\n",
        "    # Get the counts for Bigrams and Unigrams\n",
        "    for i in range(len(name) - 1):\n",
        "        c1[name[i]] += 1\n",
        "        c2[(name[i], name[i + 1])] += 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "id": "507e4525",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "507e4525",
        "outputId": "bda63dc0-367e-4d65-86b7-0c37882cfc85"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Preplexity:  11.634961128234863\n"
          ]
        }
      ],
      "source": [
        "# Get perplexity\n",
        "sumneglogp = 0\n",
        "T = 0\n",
        "for name in open('/content/names.txt', 'r'):\n",
        "    # Get rid of white space and lowercase\n",
        "    name = name.lower().strip()\n",
        "    # Get the length of the word, without padding\n",
        "    T += len(name) + 1\n",
        "    # Don't pad the STOP since we are not generating; pad with START\n",
        "    name = '.' + name + '.'\n",
        "    # Transform to integrs\n",
        "    name = [stoi[ch] for ch in name]\n",
        "    # Get the loss -log(p(name)); use that the log of the product is the sum of the logs\n",
        "    for i in range(len(name) - 1):\n",
        "        bigram = (name[i], name[i + 1])\n",
        "        prob = c2[bigram] / c1[bigram[0]] if c1[bigram[0]] > 0 else 1e-10\n",
        "        sumneglogp += -math.log(prob, 2)\n",
        "# Print the Perplexity\n",
        "print('Preplexity: ', torch.pow(2, torch.tensor(sumneglogp / T )).item())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "id": "b931b726",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b931b726",
        "outputId": "4ef23846-92c5-4a29-915a-dc751c2dacb9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Generated name:  smahikathes\n"
          ]
        }
      ],
      "source": [
        "# Generate a random word using this distributon\n",
        "# When you generate STOP, terminate\n",
        "name = '.'\n",
        "while True:\n",
        "    c = stoi[name[-1]]\n",
        "    # Make the distribution from c to any other word other than START\n",
        "    p = []\n",
        "    for d in range(vocab_size):\n",
        "        # Use the same indicies as the dictionary we set up\n",
        "        # Populate p\n",
        "        prob = c2[(c, d)] / c1[c] if c1[c] > 0 else 0\n",
        "        p.append(prob)\n",
        "    #print(p)\n",
        "\n",
        "    assert len(p) == vocab_size\n",
        "    # Sample randmly from the probability using torch.Categorical\n",
        "    c = torch.multinomial(torch.tensor(p), num_samples=1)\n",
        "    # Offset by 1 since we want indices [1, 2, ..., vocab_size]\n",
        "    if c.item() == 0:\n",
        "        break\n",
        "    else:\n",
        "        name += itos[c.item()]\n",
        "print('Generated name: ' , name[1:])\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "561cdacb",
      "metadata": {
        "id": "561cdacb"
      },
      "source": [
        "## MLP Language Model\n",
        "\n",
        "- Implement the MLP language model from below\n",
        "- Look at page 7, Equation (1)\n",
        "- https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "982566bf",
      "metadata": {
        "id": "982566bf"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "id": "fb6328a5",
      "metadata": {
        "id": "fb6328a5"
      },
      "outputs": [],
      "source": [
        "x_data = []\n",
        "y_data = []\n",
        "for name in open('/content/names.txt', 'r'):\n",
        "    name = name.lower().strip()\n",
        "    # Pad with block_size START tokens and 1 STOP token\n",
        "    name = ''.join(block_size * ['.']) + name + '.'\n",
        "    # Loop through name and get the (x, y) pairs\n",
        "    # Add (x, y) to x_data and y_data and make sure you transform to characters\n",
        "    # Make sure x_data and y_data have integers, use stoi\n",
        "    for i in range(len(name) - block_size):\n",
        "        x = name[i:i + block_size]\n",
        "        y = name[i + block_size]\n",
        "\n",
        "        x_data.append([stoi[ch] for ch in x])\n",
        "        y_data.append(stoi[y])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "id": "3142dd13",
      "metadata": {
        "id": "3142dd13"
      },
      "outputs": [],
      "source": [
        "class MLPLanguageModel(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        # An embedding for each character; vocab_size of them\n",
        "        self.e = nn.Embedding(vocab_size, d_model)\n",
        "        # H; should take in block_size * d_model vector and output d_h\n",
        "        self.H = nn.Linear(block_size * d_model, d_h)\n",
        "        # U; should take in d_h vector and output vocab_size\n",
        "        self.U = nn.Linear(d_h, vocab_size)\n",
        "        # W; for the skip connection, should take in block_size * d_model and output vocab_size\n",
        "        self.W = nn.Linear(block_size * d_model, vocab_size)\n",
        "\n",
        "    # x should be (batch_size, block_size)\n",
        "    def forward(self, x):\n",
        "        x_embed = self.e(x)\n",
        "\n",
        "        x_flat = x_embed.view(x.shape[0], -1)\n",
        "\n",
        "        h = torch.tanh(self.H(x_flat))\n",
        "\n",
        "        logits_from_H = self.U(h)\n",
        "\n",
        "        logits_from_W = self.W(x_flat)\n",
        "\n",
        "        logits = logits_from_H + logits_from_W\n",
        "\n",
        "        return logits"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "4a4f35f7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4a4f35f7",
        "outputId": "a6822f62-7991-4d33-b090-20bf899a12b5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "([0, 0, 0], 1)"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "x_data[0], y_data[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "id": "17bf7a0a",
      "metadata": {
        "id": "17bf7a0a"
      },
      "outputs": [],
      "source": [
        "# Define a dataloader with x_data and y_data with batch_size\n",
        "x_tensor = torch.tensor(x_data, dtype=torch.long)\n",
        "y_tensor = torch.tensor(y_data, dtype=torch.long)\n",
        "dataset = TensorDataset(x_tensor, y_tensor)\n",
        "dl = DataLoader(dataset, batch_size=batch_size, shuffle=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "a56ce82f",
      "metadata": {
        "id": "a56ce82f"
      },
      "outputs": [],
      "source": [
        "for xb, yb in dl:\n",
        "    assert xb.shape == (batch_size, 3)\n",
        "    assert yb.shape == (batch_size,)\n",
        "    break"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "1013903d",
      "metadata": {
        "id": "1013903d"
      },
      "outputs": [],
      "source": [
        "# Define the MLP model and the Adam optimizer learning rate 0.001\n",
        "model = MLPLanguageModel()\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "id": "0155215c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0155215c",
        "outputId": "14d5316c-6e80-490c-bd6e-c7abd81d6551"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.611446010351181\n",
            "2.4375156207084654\n",
            "2.3960045166015624\n",
            "2.369767486810684\n",
            "2.3549761657714843\n",
            "2.345924097776413\n",
            "2.316742844581604\n",
            "2.3182527272701265\n",
            "2.3163754296302796\n",
            "2.3062229068279265\n",
            "2.295194994688034\n",
            "2.2946333763599394\n",
            "2.2865592634677885\n",
            "2.2865233671665193\n",
            "2.274477873325348\n",
            "2.251844167470932\n",
            "2.2701436908245087\n",
            "2.2532125787734985\n",
            "2.2665084924697876\n",
            "2.2535097007751466\n",
            "2.2377729699611666\n",
            "2.244373230934143\n",
            "2.2271582429409027\n",
            "2.232074724674225\n",
            "2.21765921998024\n",
            "2.245356326341629\n",
            "2.234729920387268\n",
            "2.214441952228546\n",
            "2.220911840677261\n",
            "2.204056892871857\n",
            "2.197404512643814\n",
            "2.232346252679825\n",
            "2.2082816252708435\n",
            "2.200377222776413\n",
            "2.199765529155731\n",
            "2.199909349679947\n",
            "2.1795272858142853\n",
            "2.1886140189170837\n",
            "2.203418732881546\n",
            "2.197429868221283\n",
            "2.2041174521446227\n",
            "2.2090039417743683\n",
            "2.188116435289383\n",
            "2.180704417705536\n",
            "2.161437705516815\n",
            "2.1757346770763397\n",
            "2.18255827999115\n",
            "2.182907065629959\n",
            "2.170477710008621\n",
            "2.1869414291381837\n",
            "2.1770595309734344\n",
            "2.1918188061714172\n",
            "2.158678956747055\n",
            "2.187916508436203\n",
            "2.1647215485572815\n",
            "2.172692619562149\n",
            "2.166820346355438\n",
            "2.1653100049495695\n",
            "2.1573291585445404\n",
            "2.1567038083076477\n",
            "2.1616545894145966\n",
            "2.145424469470978\n",
            "2.149863807678223\n",
            "2.1675408146381376\n",
            "2.1540769114494323\n",
            "2.164909326791763\n",
            "2.15834277510643\n",
            "2.157108572244644\n",
            "2.1596527907848357\n",
            "2.1628772110939027\n",
            "2.1547036674022673\n",
            "2.1586102492809296\n",
            "2.155423241853714\n",
            "2.1526227531433104\n",
            "2.1555312361717225\n",
            "2.143517313718796\n",
            "2.1442312934398653\n",
            "2.1490337433815\n",
            "2.1447823979854586\n",
            "2.122824222803116\n",
            "2.149108519077301\n",
            "2.1524000129699705\n",
            "2.1527034606933593\n",
            "2.1268817856311797\n",
            "2.1389372010231016\n",
            "2.1397189066410065\n",
            "2.1432709412574766\n",
            "2.1235149464607237\n",
            "2.123265705347061\n",
            "2.137359817504883\n",
            "2.1353128209114076\n",
            "2.1274497056007386\n",
            "2.147518973350525\n",
            "2.1512406620979307\n",
            "2.1311593201160433\n",
            "2.1320352745056153\n",
            "2.1304305925369262\n",
            "2.134714173793793\n",
            "2.146876113653183\n",
            "2.148280890226364\n",
            "2.11877587723732\n",
            "2.123900061607361\n",
            "2.1252752387523652\n",
            "2.133851421833038\n",
            "2.130117484331131\n",
            "2.1277085819244386\n",
            "2.138065458059311\n",
            "2.1320008096694947\n",
            "2.145553390741348\n",
            "2.134059273958206\n",
            "2.1175340669155123\n",
            "2.124981328964233\n",
            "2.1196384878158567\n",
            "2.128861826658249\n",
            "2.1132395372390747\n",
            "2.1112218503952027\n",
            "2.1222879288196563\n",
            "2.135736060380936\n",
            "2.1201166865825654\n",
            "2.1219907569885255\n",
            "2.1170953912734984\n",
            "2.10944743180275\n",
            "2.1246019761562347\n",
            "2.1202728803157807\n",
            "2.1282936096191407\n",
            "2.126503779888153\n",
            "2.1393348569869994\n",
            "2.1296783537864683\n",
            "2.1070301659107207\n",
            "2.105255980491638\n",
            "2.124039823293686\n",
            "2.1133833768367767\n",
            "2.117161963224411\n",
            "2.138482671737671\n",
            "2.117941480636597\n",
            "2.1246203825473784\n",
            "2.1211079177856447\n",
            "2.1250449998378755\n",
            "2.107991949558258\n",
            "2.1041473438739775\n",
            "2.113171971797943\n",
            "2.105297192811966\n",
            "2.118401244878769\n",
            "2.1059009683132173\n",
            "2.109851976633072\n",
            "2.0967400453090668\n",
            "2.120379501581192\n",
            "2.122171207904816\n",
            "2.109909665107727\n",
            "2.1065241568088533\n",
            "2.1060723073482515\n",
            "2.11813348197937\n",
            "2.1210463092327116\n",
            "2.1173644411563872\n",
            "2.108681834459305\n",
            "2.1179805233478546\n",
            "2.126900803565979\n",
            "2.097648225069046\n",
            "2.086211097478867\n",
            "2.109203674554825\n",
            "2.1150060124397276\n",
            "2.1092312800884248\n",
            "2.1102221446037293\n",
            "2.0952117314338685\n",
            "2.118071933269501\n",
            "2.114318159341812\n",
            "2.1299065790176392\n",
            "2.103555102109909\n",
            "2.133686951637268\n",
            "2.111841622591019\n",
            "2.120703948497772\n",
            "2.0741961884498594\n",
            "2.1047973828315736\n",
            "2.1042607595920564\n",
            "2.095801024675369\n",
            "2.110968022108078\n",
            "2.1070429334640504\n",
            "2.1111914718151095\n",
            "2.1156154994964598\n",
            "2.103564165353775\n",
            "2.1142304737567903\n",
            "2.1122224011421205\n",
            "2.1055070395469664\n",
            "2.1232383823394776\n",
            "2.10498299908638\n",
            "2.104295739412308\n",
            "2.0871510329246523\n",
            "2.1001283366680146\n",
            "2.104630243062973\n",
            "2.106119362831116\n",
            "2.109942089319229\n",
            "2.1081555778980254\n",
            "2.112351094007492\n",
            "2.113208253145218\n",
            "2.0981029288768767\n",
            "2.108429135560989\n",
            "2.105181518793106\n",
            "2.0820834398269654\n",
            "2.1084659430980683\n",
            "2.098795566082001\n",
            "2.0931096739768984\n",
            "2.0976235535144805\n",
            "2.087070639371872\n",
            "2.092927200078964\n",
            "2.1055990517139436\n",
            "2.1079452378749846\n",
            "2.113881440162659\n",
            "2.106138099908829\n",
            "2.102130264520645\n",
            "2.0913437190055846\n",
            "2.1065429055690768\n",
            "2.102880782365799\n",
            "2.1080388417243956\n",
            "2.102310713291168\n",
            "2.093738046884537\n",
            "2.086027431964874\n",
            "2.09974174118042\n",
            "2.1097390480041502\n",
            "2.0976089632511137\n",
            "2.09829424571991\n",
            "2.098385493993759\n",
            "2.104176508665085\n",
            "2.0971629090309145\n",
            "2.09170244884491\n",
            "2.0930909106731415\n",
            "2.1087461824417115\n",
            "2.1034865736961366\n",
            "2.1117535796165465\n",
            "2.079666515350342\n",
            "2.108127337932587\n",
            "2.0927853946685793\n",
            "2.0879690358638765\n",
            "2.1020028860569\n",
            "2.1140789461135863\n",
            "2.084747444152832\n",
            "2.081286211490631\n",
            "2.0958534095287322\n",
            "2.099207726240158\n",
            "2.100809326171875\n",
            "2.111043224811554\n",
            "2.097191468477249\n",
            "2.101290437221527\n",
            "2.098914754152298\n",
            "2.0871087493896483\n",
            "2.087474266529083\n",
            "2.0864234619140625\n",
            "2.0910270526409147\n",
            "2.0930827362537383\n",
            "2.105128420829773\n",
            "2.0920639038085938\n",
            "2.118451699256897\n",
            "2.084528874397278\n",
            "2.083126659870148\n",
            "2.09178950047493\n",
            "2.101788365125656\n",
            "2.117888942480087\n",
            "2.090154021024704\n",
            "2.08294464802742\n",
            "2.0991920220851896\n",
            "2.0860924026966097\n",
            "2.0957645163536074\n",
            "2.08702411031723\n",
            "2.100417245864868\n",
            "2.096556240081787\n",
            "2.0939630212783813\n",
            "2.08812522649765\n",
            "2.091421600818634\n",
            "2.0924963974952697\n",
            "2.100976165294647\n",
            "2.1054456403255464\n",
            "2.0939964063167573\n",
            "2.0783941395282746\n",
            "2.0969844949245453\n",
            "2.0871034297943116\n",
            "2.087334669351578\n",
            "2.1013653738498688\n",
            "2.1121412010192873\n",
            "2.0806578867435457\n",
            "2.079182915687561\n",
            "2.103721528291702\n",
            "2.0908071901798246\n",
            "2.092726542711258\n",
            "2.1004842755794524\n",
            "2.0938793528079986\n",
            "2.089327912092209\n"
          ]
        }
      ],
      "source": [
        "total_loss = 0\n",
        "total_ct = 0\n",
        "total_epochs = 20\n",
        "\n",
        "for _ in range(total_epochs):\n",
        "    for xb, yb in dl:\n",
        "        # Zero the gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # Get the logits\n",
        "        logits = model(xb)\n",
        "\n",
        "        # Compute the loss\n",
        "        loss = nn.CrossEntropyLoss()(logits, yb)\n",
        "\n",
        "        # Get the new gradient\n",
        "        loss.backward()\n",
        "\n",
        "        # Clip the gradients to max norm 0.1\n",
        "        # Use clid_grad_norm from torch\n",
        "        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=0.1)\n",
        "\n",
        "        # Do a gradient update\n",
        "        optimizer.step()\n",
        "\n",
        "        # Get the loss for the batch and get the number of batches\n",
        "        total_loss += loss.item()\n",
        "        total_ct += 1\n",
        "\n",
        "        # Print the loss\n",
        "        if total_ct and total_ct % 500 == 0:\n",
        "            print(total_loss / total_ct)\n",
        "            total_loss = 0\n",
        "            total_ct = 0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "id": "4ecf5fb3",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4ecf5fb3",
        "outputId": "3bf56b10-e81b-4184-dc2d-867d383fa89b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Preplexity:  7.9720025062561035\n"
          ]
        }
      ],
      "source": [
        "with torch.no_grad():\n",
        "    # Get perplexity\n",
        "    sumneglogp = 0\n",
        "    T = 0\n",
        "    for name in open('/content/names.txt', 'r'):\n",
        "        name = name.lower().strip()\n",
        "        T += len(name) + 1\n",
        "        # Pad with block_size START tokens\n",
        "        name = ''.join(block_size * ['.']) + name + '.'\n",
        "        x_data = []\n",
        "        y_data = []\n",
        "        # Gather all the terms over the loss\n",
        "        # Notice that we compute -log p(...abc)\n",
        "        # Which is -log p(a | ...) - log p(b | a..) - log p(c | ba.)\n",
        "        for i in range(len(name) - block_size):\n",
        "            x = name[i:i + block_size]\n",
        "            y = name[i + block_size]\n",
        "            x_data.append([stoi[ch] for ch in x])\n",
        "            y_data.append(stoi[y])\n",
        "\n",
        "        x_data = torch.tensor(x_data)\n",
        "        y_data = torch.tensor(y_data)\n",
        "        # Gather the loss over the name, for each term\n",
        "        # You need to get the softmax loss for each term\n",
        "        # Can either use the CrossEntropyLoss or do this manually\n",
        "        # Compute the loss\n",
        "        logits = model(x_data)\n",
        "\n",
        "        # Use reduction \"sum\" so you don't need to worry about N\n",
        "        loss = F.cross_entropy(logits, y_data, reduction='sum')\n",
        "\n",
        "        # Change to log base 2\n",
        "        loss *= (1 / math.log(2))\n",
        "\n",
        "        sumneglogp += loss\n",
        "\n",
        "    print('Preplexity: ', torch.pow(2, sumneglogp.clone().detach() / T).item())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "id": "e77131c8",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e77131c8",
        "outputId": "4bf7f687-5110-474d-b36a-14a08c8d15ab"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Generated name:  ifinstothia\n"
          ]
        }
      ],
      "source": [
        "# Generate a random word using this distributon\n",
        "# When you generate STOP, terminate\n",
        "name = ''.join(block_size * ['.'])\n",
        "while True:\n",
        "    # Get the idx\n",
        "    c = [stoi[ch] for ch in name[-block_size:]]\n",
        "    c = torch.tensor([c])\n",
        "    logits = model(c)\n",
        "    # Make the distribution from c to any other word other than START\n",
        "    p = torch.softmax(logits, dim=-1).squeeze()\n",
        "    # Randomly sample from p a new character\n",
        "    c = torch.multinomial(p, 1)\n",
        "    if c.item() == 0:\n",
        "        break\n",
        "    else:\n",
        "        name += itos[c.item()]\n",
        "print('Generated name: ' , name[block_size:])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bb1b01ed",
      "metadata": {
        "id": "bb1b01ed"
      },
      "source": [
        "## RNN Language Model\n",
        "- For each name, run an RNN character by character\n",
        "- Use the recursion x = Tanh()(Wh @ h + Wx @ x + bh + bx) and y = Softmax()(Wy h + by)\n",
        "- Do not use the RNN Cell from PyTorch, do this manually as hinted below"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "id": "c765e7fc",
      "metadata": {
        "id": "c765e7fc"
      },
      "outputs": [],
      "source": [
        "class RNNLanguageModel(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        # Each token has an embedding of size vocab_size\n",
        "        self.e = nn.Embedding(vocab_size, d_model)\n",
        "        # Wh used to map hidden to hidden\n",
        "        self.Wh = nn.Linear(d_h, d_h, bias=False)\n",
        "        self.Wx = nn.Linear(d_model, d_h, bias=False)\n",
        "        self.bh = nn.Parameter(torch.zeros(d_h))\n",
        "        self.bx = nn.Parameter(torch.zeros(d_h))\n",
        "        self.Wy = nn.Linear(d_h, vocab_size, bias=False)\n",
        "        self.by = nn.Parameter(torch.zeros(vocab_size))\n",
        "\n",
        "    def forward(self, x, h):\n",
        "        # Run through to get the embedding for the token\n",
        "        # The embedding per token is the feature vector x  we pass into the\n",
        "        # Represent x as an embedding\n",
        "        x = self.e(x)\n",
        "        # Get the hidden state\n",
        "        h = torch.tanh(self.Wh(h) + self.Wx(x) + self.bh + self.bx)\n",
        "        # Get the logits we use to predict y\n",
        "        z = self.Wy(h) + self.by\n",
        "        # Return the z predicting y for the timestep we are at and the next hidden state\n",
        "        return z, h"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "id": "cd798358",
      "metadata": {
        "id": "cd798358"
      },
      "outputs": [],
      "source": [
        "model = RNNLanguageModel()\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=1e-4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "id": "7f3a49ff",
      "metadata": {
        "id": "7f3a49ff",
        "outputId": "273a8519-8733-446b-9c79-bc9f3e5eb546",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.2346749997138975\n",
            "2.9612299370765687\n",
            "2.6387593865394594\n",
            "2.5711924695968627\n",
            "2.5208994579315185\n",
            "2.524030259847641\n",
            "2.3468097865581514\n",
            "2.339002094268799\n",
            "2.373354949951172\n",
            "2.4455658316612245\n",
            "2.3801285314559935\n",
            "2.360020858049393\n",
            "2.3460512936115263\n",
            "2.381074472665787\n",
            "2.3412943732738496\n",
            "2.2778618478775026\n",
            "2.379549436569214\n",
            "2.3282649862766265\n",
            "2.367284457683563\n",
            "2.2728068053722383\n",
            "2.430879029035568\n",
            "2.341924160718918\n",
            "2.3470101749897\n",
            "2.395187603235245\n",
            "2.3690250086784364\n",
            "2.30746666431427\n",
            "2.3385295605659486\n",
            "2.2912901496887206\n",
            "2.2944280767440794\n",
            "2.304745202064514\n",
            "2.2837333977222443\n",
            "2.352713644504547\n",
            "2.2922023820877073\n",
            "2.2946529376506803\n",
            "2.2988898980617525\n",
            "2.250194396972656\n",
            "2.316904966831207\n",
            "2.3403725588321684\n",
            "2.2874489212036133\n",
            "2.301011921167374\n",
            "2.2982398653030396\n",
            "2.3686236155033114\n",
            "2.2781531023979187\n",
            "2.325150728225708\n",
            "2.282671936750412\n",
            "2.266758224964142\n",
            "2.2868365252017977\n",
            "2.2354343271255495\n",
            "2.244829000234604\n",
            "2.2683551156520845\n",
            "2.267380028963089\n",
            "2.3131135630607607\n",
            "2.2576067769527435\n",
            "2.3255837142467497\n",
            "2.3123147535324096\n",
            "2.2678618216514588\n",
            "2.2247591435909273\n",
            "2.2708678233623503\n",
            "2.2363789117336275\n",
            "2.294105368852615\n",
            "2.3375513529777527\n",
            "2.3076335763931275\n",
            "2.2440969479084014\n",
            "2.206691656112671\n",
            "2.3028414571285247\n",
            "2.328050196170807\n",
            "2.251630269289017\n",
            "2.2660009336471556\n",
            "2.272099289894104\n",
            "2.2607102358341216\n",
            "2.254306570291519\n",
            "2.2986977899074557\n",
            "2.216272916793823\n",
            "2.181194096803665\n",
            "2.224033925533295\n",
            "2.1065982282161713\n",
            "2.3391265368461607\n",
            "2.2887989819049834\n",
            "2.2590784192085267\n",
            "2.1802283668518068\n",
            "2.267639344930649\n",
            "2.201269950866699\n",
            "2.2939240741729736\n",
            "2.153486750125885\n",
            "2.233026807308197\n",
            "2.28312633395195\n",
            "2.2258973944187166\n",
            "2.403886196613312\n",
            "2.1625999426841735\n",
            "2.2359217369556426\n",
            "2.32149854183197\n",
            "2.163088147640228\n",
            "2.23288823723793\n",
            "2.2056064760684966\n",
            "2.16247967839241\n",
            "2.353159182071686\n",
            "2.2732343804836272\n",
            "2.2110280060768126\n",
            "2.17801939368248\n",
            "2.3270243871212006\n",
            "2.3249290883541107\n",
            "2.155252395868301\n",
            "2.2839311063289642\n",
            "2.324462560415268\n",
            "2.3713814210891724\n",
            "2.1052557587623597\n",
            "2.254092801809311\n",
            "2.367080614566803\n",
            "2.192330185174942\n",
            "2.126274664402008\n",
            "2.2154328286647798\n",
            "2.3382538962364197\n",
            "2.294031603336334\n",
            "2.326395560503006\n",
            "2.078658229112625\n",
            "2.2356499934196474\n",
            "2.3681687343120577\n",
            "2.367277208566666\n",
            "2.0315635657310485\n",
            "2.1915415847301483\n",
            "2.2242094910144807\n",
            "2.4824207258224487\n",
            "2.282364557981491\n",
            "2.3663875961303713\n",
            "2.0235626816749575\n",
            "2.0731867742538452\n",
            "2.3177668273448946\n",
            "2.2160024070739746\n",
            "2.3783431577682497\n",
            "2.1151109457015993\n",
            "2.028670115470886\n",
            "2.240010476112366\n",
            "2.1905990624427796\n",
            "2.361564700603485\n",
            "2.1676623380184172\n",
            "2.3464159309864043\n",
            "2.43461741566658\n",
            "2.211522927284241\n",
            "2.0099291896820066\n",
            "2.1806479692459106\n",
            "2.269738206863403\n",
            "2.1247306978702545\n",
            "2.288402682542801\n",
            "2.5429520916938784\n",
            "2.178655014038086\n",
            "1.9902082920074462\n",
            "2.01206552863121\n",
            "2.186805831193924\n",
            "2.2592500829696656\n",
            "2.173194363117218\n",
            "2.2185979318618774\n",
            "2.4210239839553833\n",
            "2.1899041640758514\n",
            "2.2413827216625215\n",
            "2.3580531024932863\n",
            "2.1841284823417664\n",
            "2.180898954868317\n",
            "1.9710091388225555\n",
            "2.062474740743637\n",
            "2.1776319313049317\n",
            "2.221699901819229\n",
            "2.095269136428833\n",
            "2.1898431479930878\n",
            "2.3789149165153503\n",
            "2.375606483221054\n",
            "2.160854377746582\n",
            "1.9338639378547668\n",
            "2.019966230392456\n",
            "1.9277152681350709\n",
            "2.1783853662014008\n",
            "2.235936542749405\n",
            "1.8549281358718872\n",
            "2.166725842952728\n",
            "2.2950754141807557\n",
            "2.487680345773697\n",
            "2.299467133283615\n",
            "2.134326003789902\n",
            "2.285493493080139\n",
            "2.3919355762004852\n",
            "2.292062830924988\n",
            "2.382156888246536\n",
            "2.4536019694805145\n",
            "2.3633235335350036\n",
            "2.379869931936264\n",
            "2.373674737215042\n",
            "2.321526896953583\n",
            "2.3556986057758333\n",
            "2.358788937330246\n",
            "2.3338747215270996\n",
            "2.3844584608078003\n",
            "2.3529538893699646\n",
            "2.3749924898147583\n",
            "2.2961457574367525\n",
            "2.2930707931518555\n",
            "2.274086334705353\n",
            "2.314054772853851\n",
            "2.2522285771369934\n",
            "2.3177933740615844\n",
            "2.316789718866348\n",
            "2.3682357406616212\n",
            "2.380779596567154\n",
            "2.3621640717983245\n",
            "2.3015250265598297\n",
            "2.3719542729854584\n",
            "2.335757923126221\n",
            "2.302899612188339\n",
            "2.317591735124588\n",
            "2.2625499773025513\n",
            "2.269463087320328\n",
            "2.1699518299102785\n",
            "2.299648265838623\n",
            "2.315639715194702\n",
            "2.2896696448326113\n",
            "2.3288955426216127\n",
            "2.2819652473926544\n",
            "2.3353873658180238\n",
            "2.345314861536026\n",
            "2.2967811918258665\n",
            "2.383798460960388\n",
            "2.277446687221527\n",
            "2.4108227837085723\n",
            "2.2555727207660676\n",
            "2.263456836938858\n",
            "2.3460819590091706\n",
            "2.355663868188858\n",
            "2.272386432886124\n",
            "2.3272906851768496\n",
            "2.4349557733535767\n",
            "2.3567336344718934\n",
            "2.2342533195018768\n",
            "2.383608330488205\n",
            "2.311851495504379\n",
            "2.3371790730953217\n",
            "2.299744917154312\n",
            "2.332475252151489\n",
            "2.3815310394763944\n",
            "2.319988964796066\n",
            "2.370671192407608\n",
            "2.3611261117458344\n",
            "2.3273751759529113\n",
            "2.3028382563591006\n",
            "2.3087208437919617\n",
            "2.36286248922348\n",
            "2.3406732904911043\n",
            "2.3931917583942415\n",
            "2.392921596765518\n",
            "2.4113005781173706\n",
            "2.232362366914749\n",
            "2.3349557530879976\n",
            "2.37282081246376\n",
            "2.3392115116119383\n",
            "2.216090439558029\n",
            "2.3445387792587282\n",
            "2.1230583071708677\n",
            "2.448523404598236\n",
            "2.4677063417434693\n",
            "2.2987512707710267\n",
            "2.4256710612773897\n",
            "2.1591297030448913\n",
            "2.461182425022125\n",
            "2.47161535859108\n",
            "2.396123163700104\n",
            "2.2148388803005217\n",
            "2.446568378210068\n",
            "2.114253844022751\n",
            "2.3686598443984987\n",
            "2.344046471118927\n",
            "2.513208508491516\n",
            "2.3719708478450774\n",
            "2.274453505277634\n",
            "2.3494814574718474\n",
            "2.142664302587509\n",
            "2.2032200253009795\n",
            "2.449756199121475\n",
            "2.435994544029236\n",
            "2.4249906694889067\n",
            "2.43581547498703\n",
            "2.2930823147296904\n",
            "2.1987078261375426\n",
            "2.404549547433853\n",
            "2.380948746204376\n",
            "2.235316252708435\n",
            "2.325266054868698\n",
            "2.3584003853797912\n",
            "2.5102344620227814\n",
            "2.3019493186473845\n",
            "2.4075731301307677\n",
            "2.40204394698143\n",
            "2.223695788383484\n",
            "2.2886887288093565\n",
            "2.1705039715766907\n",
            "2.4280008518695833\n",
            "2.458092962503433\n",
            "2.057478041648865\n",
            "2.1004338562488556\n",
            "2.3689689207077027\n",
            "2.293238568305969\n",
            "2.5351260471343995\n",
            "2.36227872133255\n",
            "2.3585305404663086\n",
            "2.464196230173111\n",
            "2.5501688277721404\n",
            "2.154787849187851\n",
            "2.3255150008201597\n",
            "2.275146645307541\n",
            "2.106628769636154\n",
            "2.381449811458588\n",
            "2.504039605855942\n",
            "2.4594426774978637\n",
            "2.049634178876877\n",
            "2.1729155623912813\n",
            "2.094020676612854\n",
            "2.2786643719673156\n",
            "2.3929485476016996\n",
            "2.4366253650188447\n",
            "2.573218363523483\n",
            "2.3393897247314452\n",
            "2.321470135450363\n",
            "2.2338300168514253\n",
            "2.4746490263938905\n",
            "2.3443880784511566\n",
            "2.2101720583438875\n",
            "2.1476497828960417\n",
            "2.144196286201477\n",
            "2.1153125059604645\n",
            "2.1261880707740786\n",
            "2.033399330377579\n",
            "2.018282246589661\n",
            "2.0655725407600403\n",
            "2.0732377469539642\n",
            "2.081973831653595\n",
            "2.0715956437587737\n",
            "2.036813007593155\n",
            "2.1172937250137327\n",
            "2.107019418478012\n",
            "2.024238930940628\n",
            "2.047539141178131\n",
            "2.0971619522571565\n",
            "2.0949131405353545\n",
            "2.1056105601787567\n",
            "2.0362348425388337\n",
            "2.1251701748371126\n",
            "2.0823193788528442\n",
            "2.1077868330478666\n",
            "2.1508743822574616\n",
            "2.070246608257294\n",
            "2.0651633381843566\n",
            "2.0605880415439604\n",
            "2.0517553627490996\n",
            "2.048810924291611\n",
            "2.052408417463303\n",
            "2.116393107175827\n",
            "2.047457686662674\n",
            "2.08326868891716\n",
            "2.0470745122432707\n",
            "2.077560178041458\n",
            "2.081311093568802\n",
            "2.13395148396492\n",
            "2.079549032449722\n",
            "2.140333172082901\n",
            "2.048596235513687\n",
            "2.1477275562286375\n",
            "2.108555129766464\n",
            "2.179078757762909\n",
            "2.1000030565261842\n",
            "2.0984452998638154\n",
            "2.066548988819122\n",
            "2.057655620574951\n",
            "2.0518072497844697\n",
            "2.147645729780197\n",
            "2.0393091404438017\n",
            "2.132534313201904\n",
            "2.1066555857658384\n",
            "2.113605411052704\n",
            "2.116463215351105\n",
            "2.1461364352703094\n",
            "2.1032969093322755\n",
            "2.0484986662864686\n",
            "2.085038958787918\n",
            "2.1633419823646545\n",
            "2.117621750831604\n",
            "2.085836489200592\n",
            "2.123165751695633\n",
            "2.010782096385956\n",
            "2.1518389225006103\n",
            "2.0404572880268095\n",
            "2.1428604459762575\n",
            "2.153643846511841\n",
            "2.090335478782654\n",
            "2.0840143275260927\n",
            "2.175724539756775\n",
            "2.084446405172348\n",
            "2.022253941297531\n",
            "2.0965321600437163\n",
            "2.0857459688186646\n",
            "1.9438258850574492\n",
            "2.162956248521805\n",
            "2.1426050209999086\n",
            "2.1510625457763672\n",
            "1.94930037856102\n",
            "2.209981677532196\n",
            "2.0284834718704223\n",
            "2.1094259178638457\n",
            "2.0202090632915497\n",
            "2.0790798342227936\n",
            "2.2446937346458435\n",
            "2.0256525707244872\n",
            "2.172981674671173\n",
            "2.032383278608322\n",
            "2.114313603639603\n",
            "2.22850063085556\n",
            "2.0026283824443816\n",
            "2.067464963197708\n",
            "2.078225337266922\n",
            "2.023488781452179\n",
            "2.0827761626243593\n",
            "2.3372985482215882\n",
            "2.2260032081604004\n",
            "1.9248319017887114\n",
            "2.094500045776367\n",
            "2.209143280982971\n",
            "2.0237361645698546\n",
            "2.1760658872127534\n",
            "2.2588043749332427\n",
            "2.292029185295105\n",
            "2.0571836400032044\n",
            "2.0396811985969543\n",
            "2.107303237915039\n",
            "2.2032918190956114\n",
            "1.9931399071216582\n",
            "2.1007225143909456\n",
            "2.20216143488884\n",
            "2.154187935590744\n",
            "2.307519258260727\n",
            "2.030436979532242\n",
            "2.117425192594528\n",
            "2.0852791905403136\n",
            "2.3577639305591584\n",
            "1.936095187664032\n",
            "2.0112863528728484\n",
            "2.1316884219646455\n",
            "2.3635804831981657\n",
            "2.1972553586959838\n",
            "2.2230487668514254\n",
            "2.121655650138855\n",
            "1.9515334177017212\n",
            "2.11310981631279\n",
            "2.0911918568611143\n",
            "2.1668556213378904\n",
            "2.074946548938751\n",
            "1.9608539986610412\n",
            "2.06366356253624\n",
            "2.1320412909984587\n",
            "2.190849496126175\n",
            "2.190777451992035\n",
            "2.13882377743721\n",
            "2.370712178945541\n",
            "2.238044009208679\n",
            "1.9474501454830169\n",
            "1.9339102280139924\n",
            "2.130554206371307\n",
            "2.0945916712284087\n",
            "2.0974365675449373\n",
            "2.4498057281970977\n",
            "2.274892957210541\n",
            "1.8568890714645385\n",
            "1.9525434565544129\n",
            "2.029755618572235\n",
            "2.1782766401767732\n",
            "2.0566314268112182\n",
            "2.0954185163974763\n",
            "2.367806837558746\n",
            "2.206450037956238\n",
            "2.146190928220749\n",
            "2.166892421245575\n",
            "2.2010457038879396\n",
            "2.1350632131099703\n",
            "1.9466854560375213\n",
            "1.980248429775238\n",
            "1.9320398724079133\n",
            "2.1342774307727814\n",
            "2.0612533009052276\n",
            "2.0655355978012087\n",
            "2.1141326022148133\n",
            "2.366789336204529\n",
            "2.1893431401252745\n",
            "1.89121156334877\n",
            "1.94105637550354\n",
            "1.8172496378421783\n",
            "2.102403862476349\n",
            "2.1183553779125215\n",
            "1.9131493878364563\n",
            "1.9666618478298188\n",
            "2.2479725754261017\n",
            "2.4073633301258086\n",
            "2.2569536316394805\n",
            "2.0585037624835967\n",
            "2.2286711990833283\n",
            "2.2038503110408785\n",
            "2.3503309535980224\n",
            "2.189522086381912\n",
            "2.241959227323532\n",
            "2.289225220680237\n",
            "2.2349987030029297\n",
            "2.277937853336334\n",
            "2.2682830941677095\n",
            "2.212890617847443\n",
            "2.2113622999191285\n",
            "2.2263143157958982\n",
            "2.2786649656295777\n",
            "2.257865869998932\n",
            "2.30202352643013\n",
            "2.256276047229767\n",
            "2.170508327484131\n",
            "2.1648403346538543\n",
            "2.2189662086963655\n",
            "2.1415501713752745\n",
            "2.221215499639511\n",
            "2.2244658744335175\n",
            "2.2851201152801512\n",
            "2.2245216941833497\n",
            "2.329087002277374\n",
            "2.2885507702827455\n",
            "2.2353515625\n",
            "2.2699487805366516\n",
            "2.240129863023758\n",
            "2.1836738443374633\n",
            "2.2647013163566587\n",
            "2.1624050092697145\n",
            "2.120120122432709\n",
            "2.188493548631668\n",
            "2.1902387380599975\n",
            "2.261352301836014\n",
            "2.2131901347637175\n",
            "2.2618368601799013\n",
            "2.201767350435257\n",
            "2.2573106825351714\n",
            "2.2893376886844634\n",
            "2.226987771987915\n",
            "2.2414533853530885\n",
            "2.316398812532425\n",
            "2.180145403146744\n",
            "2.2700453281402586\n",
            "2.240931830406189\n",
            "2.2512150847911836\n",
            "2.208469774723053\n",
            "2.249057483673096\n",
            "2.3318266582489016\n",
            "2.304828493595123\n",
            "2.23804741024971\n",
            "2.264633606672287\n",
            "2.280509892702103\n",
            "2.2624349296092987\n",
            "2.2646966433525084\n",
            "2.229204251766205\n",
            "2.2840606808662414\n",
            "2.2148041594028474\n",
            "2.4065877556800843\n",
            "2.26829983830452\n",
            "2.1998968827724457\n",
            "2.3165907669067383\n",
            "2.214971611499786\n",
            "2.2896205830574035\n",
            "2.272577042579651\n",
            "2.3238424742221833\n",
            "2.2940245866775513\n",
            "2.3304893267154694\n",
            "2.2971854412555697\n",
            "2.2308830046653747\n",
            "2.208002405166626\n",
            "2.3249146819114683\n",
            "2.2323906445503234\n",
            "2.206001579761505\n",
            "2.1146170926094054\n",
            "2.3398931086063386\n",
            "2.3675692760944367\n",
            "2.397759305238724\n",
            "2.238389730453491\n",
            "2.198271223306656\n",
            "2.2748906672000886\n",
            "2.402205836772919\n",
            "2.402279292345047\n",
            "2.189062044620514\n",
            "2.298886338472366\n",
            "2.2265359473228457\n",
            "2.1954151499271393\n",
            "2.3058232259750366\n",
            "2.4147336304187776\n",
            "2.377094062566757\n",
            "2.170813109874725\n",
            "2.2286586892604827\n",
            "2.1759499073028565\n",
            "2.0632818484306337\n",
            "2.344630688428879\n",
            "2.382234447002411\n",
            "2.3307275593280794\n",
            "2.475479156970978\n",
            "2.275647599697113\n",
            "2.132237355709076\n",
            "2.241201127767563\n",
            "2.468071972131729\n",
            "2.1847796130180357\n",
            "2.1385731828212737\n",
            "2.311533088684082\n",
            "2.5022693395614626\n",
            "2.2591882658004763\n",
            "2.2647940480709075\n",
            "2.3771120822429657\n",
            "2.280052134990692\n",
            "2.223607180118561\n",
            "2.1416882252693177\n",
            "2.2586190366744994\n",
            "2.4346731340885164\n",
            "2.0743062007427215\n",
            "2.1139764058589936\n",
            "2.2176202535629272\n",
            "2.2478470861911775\n",
            "2.508580127954483\n",
            "2.300904176235199\n",
            "2.277701663970947\n",
            "2.4586326670646668\n",
            "2.477491489648819\n",
            "2.242123770713806\n",
            "2.227105950117111\n",
            "2.153982731103897\n",
            "2.1612020254135134\n",
            "2.232521479129791\n",
            "2.4475615608692167\n",
            "2.444391230344772\n",
            "2.0244770455360412\n",
            "2.1092101740837097\n",
            "2.1054428100585936\n",
            "2.1681726467609406\n",
            "2.358062217235565\n",
            "2.3830931437015535\n",
            "2.4709050261974337\n",
            "2.29727986574173\n",
            "2.3317697834968567\n",
            "2.1501501846313475\n",
            "2.4706483268737793\n",
            "2.264503861665726\n",
            "2.154596985578537\n",
            "2.0877531111240386\n",
            "2.0102669060230256\n",
            "2.077002675533295\n",
            "2.0128148889541624\n",
            "1.9773813855648041\n",
            "2.006230856180191\n",
            "1.8952598512172698\n",
            "1.9991606593132019\n",
            "2.0226405310630797\n",
            "1.9794708001613617\n",
            "1.960825971364975\n",
            "2.012511446475983\n",
            "2.0706505358219145\n",
            "1.9650324475765228\n",
            "1.9706170022487641\n",
            "1.9997785985469818\n",
            "2.0013787031173704\n",
            "2.0292545068264007\n",
            "1.9525010895729065\n",
            "2.0660224425792695\n",
            "2.0195394909381865\n",
            "2.0301187932491302\n",
            "2.085450199842453\n",
            "2.0214556896686555\n",
            "2.0013984298706053\n",
            "2.003584065437317\n",
            "1.9717230010032654\n",
            "1.9551047778129578\n",
            "2.019034284353256\n",
            "2.018194888830185\n",
            "1.996918159723282\n",
            "2.0145155692100527\n",
            "1.9832252824306489\n",
            "2.042137043476105\n",
            "1.9839728927612306\n",
            "2.0618725669384004\n",
            "2.0894296026229857\n",
            "2.029085227251053\n",
            "1.9996985936164855\n",
            "2.0523349690437316\n",
            "2.0565668046474457\n",
            "2.0850149750709535\n",
            "2.0911950767040253\n",
            "2.0199673235416413\n",
            "2.026251310110092\n",
            "2.013129863739014\n",
            "1.9860815942287444\n",
            "2.0060284793376923\n",
            "2.0967981779575346\n",
            "2.0215703320503233\n",
            "2.009941922426224\n",
            "2.1056634867191315\n",
            "2.1072757172584535\n",
            "2.0361092150211335\n",
            "2.099449110031128\n",
            "2.003212158679962\n",
            "2.0729391264915464\n",
            "2.0003066992759706\n",
            "2.073871424198151\n",
            "2.061112025976181\n",
            "2.0940993285179137\n",
            "1.9823396003246307\n",
            "2.036072014570236\n",
            "2.0035015857219696\n",
            "2.045120404958725\n",
            "2.1305983734130858\n",
            "2.0344722974300384\n",
            "2.0136588549613954\n",
            "2.162683079242706\n",
            "1.9828078496456145\n",
            "2.034827626943588\n",
            "2.073647290468216\n",
            "1.952681759595871\n",
            "1.9649972808361054\n",
            "2.0551176190376284\n",
            "2.1247579669952392\n",
            "2.0532612192630766\n",
            "1.9809721088409424\n",
            "2.061565942764282\n",
            "2.1040402603149415\n",
            "1.9593060755729674\n",
            "2.0333459293842315\n",
            "2.0409681618213655\n",
            "2.1967020630836487\n",
            "1.9970322799682618\n",
            "2.035263489484787\n",
            "2.045624349117279\n",
            "1.9973164546489715\n",
            "2.167992641925812\n",
            "2.087347090244293\n",
            "1.986141940355301\n",
            "2.05727209687233\n",
            "2.001219530105591\n",
            "1.98344251871109\n",
            "2.304047418832779\n",
            "2.13622545838356\n",
            "1.9736567258834838\n",
            "2.002458400726318\n",
            "2.1841889429092407\n",
            "1.9523315167427062\n",
            "2.085957951545715\n",
            "2.2339997470378874\n",
            "2.176486448049545\n",
            "2.147826200723648\n",
            "1.999598025083542\n",
            "2.0085160505771635\n",
            "2.2171445477008818\n",
            "1.9140085887908935\n",
            "2.054164732694626\n",
            "2.0635482048988343\n",
            "2.1283741891384125\n",
            "2.2770740294456484\n",
            "2.0818297874927523\n",
            "2.0396318507194517\n",
            "2.1066547727584837\n",
            "2.150622127056122\n",
            "2.0478975808620454\n",
            "1.8987261044979096\n",
            "2.1026337540149687\n",
            "2.136463861465454\n",
            "2.337413522005081\n",
            "2.187217261791229\n",
            "2.1519834244251252\n",
            "1.938837889432907\n",
            "2.0037753999233248\n",
            "2.019612730741501\n",
            "2.134455978870392\n",
            "2.1479656875133513\n",
            "1.8894304466247558\n",
            "1.9384030389785767\n",
            "2.095859258174896\n",
            "2.0663898742198943\n",
            "2.2731288015842437\n",
            "2.0417571580410003\n",
            "2.2830183446407317\n",
            "2.2534719574451447\n",
            "2.0176119947433473\n",
            "1.9684123075008393\n",
            "2.0013184010982514\n",
            "2.0764484572410584\n",
            "2.051429132223129\n",
            "2.2922109282016754\n",
            "2.342228430509567\n",
            "1.8705887055397035\n",
            "1.9304220938682557\n",
            "1.9547566437721253\n",
            "2.0822299587726594\n",
            "2.0303501260280608\n",
            "2.01959827542305\n",
            "2.2799904680252077\n",
            "2.212245388031006\n",
            "2.1342608404159544\n",
            "2.1015379071235656\n",
            "2.272436785697937\n",
            "2.028634877204895\n",
            "2.059981437921524\n",
            "1.8781601870059967\n",
            "1.9895624113082886\n",
            "2.028713550567627\n",
            "2.0081337976455687\n",
            "1.949927304983139\n",
            "2.131093975305557\n",
            "2.268728157281876\n",
            "2.2493168210983274\n",
            "1.8603706562519073\n",
            "1.9212600517272949\n",
            "1.8522642958164215\n",
            "1.939596837759018\n",
            "2.103072837591171\n",
            "1.9953781759738922\n",
            "1.9102014923095703\n",
            "2.095778501033783\n",
            "2.3102110016345976\n",
            "2.290661507844925\n",
            "2.099666007757187\n",
            "2.1539011502265932\n",
            "2.1296779024600982\n",
            "2.3128452932834627\n",
            "2.09607537150383\n",
            "2.2496248590946197\n",
            "2.177902867794037\n",
            "2.1560259008407594\n",
            "2.2603185856342316\n",
            "2.180948075056076\n",
            "2.161664547920227\n",
            "2.19425453543663\n",
            "2.1704489183425903\n",
            "2.2255748927593233\n",
            "2.227755366563797\n",
            "2.2581615245342253\n",
            "2.2310112929344177\n",
            "2.1377519464492796\n",
            "2.088405932188034\n",
            "2.170149099826813\n",
            "2.130837765932083\n",
            "2.1321083211898806\n",
            "2.1897066390514373\n",
            "2.2666119265556337\n",
            "2.1491653215885163\n",
            "2.266077151298523\n",
            "2.250451945066452\n",
            "2.169197027683258\n",
            "2.2337559175491335\n",
            "2.232468047142029\n",
            "2.1798153936862947\n",
            "2.173510254621506\n",
            "2.1300054395198824\n",
            "2.103527181148529\n",
            "2.0998042142391204\n",
            "2.1995831429958344\n",
            "2.1969831228256225\n",
            "2.1332820188999175\n",
            "2.241889536380768\n",
            "2.2097368228435514\n",
            "2.181944454908371\n",
            "2.2489753830432893\n",
            "2.1836811220645904\n",
            "2.229524904489517\n",
            "2.269758769273758\n",
            "2.224371328353882\n",
            "2.1736109387874603\n",
            "2.1470213878154754\n",
            "2.2054310774803163\n",
            "2.214587656259537\n",
            "2.1595489954948426\n",
            "2.2942111444473268\n",
            "2.3427850079536436\n",
            "2.2451249599456786\n",
            "2.1043474864959717\n",
            "2.279071846008301\n",
            "2.184696319103241\n",
            "2.292741230726242\n",
            "2.0987239575386045\n",
            "2.319601283073425\n",
            "2.2270492208004\n",
            "2.273384541273117\n",
            "2.2114065885543823\n",
            "2.198968082666397\n",
            "2.307892199754715\n",
            "2.160582579374313\n",
            "2.22052640080452\n",
            "2.33376708984375\n",
            "2.2080099821090697\n",
            "2.2884547305107117\n",
            "2.314395681619644\n",
            "2.2863113284111023\n",
            "2.164121375083923\n",
            "2.1641869616508482\n",
            "2.321770511865616\n",
            "2.230305321216583\n",
            "2.091679641008377\n",
            "2.1978734016418455\n",
            "2.132483803033829\n",
            "2.385739518404007\n",
            "2.380936566591263\n",
            "2.1378749096393586\n",
            "2.273114129304886\n",
            "2.193373928070068\n",
            "2.3813473868370054\n",
            "2.3712337684631346\n",
            "2.2147866392135622\n",
            "2.1572249937057495\n",
            "2.2542986035346986\n",
            "2.121318061351776\n",
            "2.331280999183655\n",
            "2.31363728761673\n",
            "2.377277839183807\n",
            "2.185843747854233\n",
            "2.1309730577468873\n",
            "2.2916501426696776\n",
            "1.955072476863861\n",
            "2.2237018430233\n",
            "2.365288169384003\n",
            "2.3240601229667663\n",
            "2.345128095149994\n",
            "2.3353681695461272\n",
            "2.168889251947403\n",
            "2.1085988771915436\n",
            "2.458717721700668\n",
            "2.194555649757385\n",
            "2.0950034928321837\n",
            "2.234202219247818\n",
            "2.449358724355698\n",
            "2.312699929475784\n",
            "2.115035525560379\n",
            "2.328435435295105\n",
            "2.3900405991077425\n",
            "2.2507902216911315\n",
            "2.12854576587677\n",
            "2.1397031748294832\n",
            "2.3629249215126036\n",
            "2.176871795654297\n",
            "2.073042172193527\n",
            "2.0445407247543335\n",
            "2.2972882950305937\n",
            "2.378700486421585\n",
            "2.340421555042267\n",
            "2.3416967833042146\n",
            "2.3123797082901003\n",
            "2.419350838661194\n",
            "2.3229412412643433\n",
            "2.1549386954307557\n",
            "2.16985165476799\n",
            "2.209876163005829\n",
            "2.082830978631973\n",
            "2.4146943259239197\n",
            "2.31913859128952\n",
            "2.2659180855751035\n",
            "2.0008942031860353\n",
            "2.1342651617527006\n",
            "2.011929075717926\n",
            "2.377708464860916\n",
            "2.2564505660533904\n",
            "2.4187673461437225\n",
            "2.384923287630081\n",
            "2.276307872533798\n",
            "2.284906104803085\n",
            "2.200983463525772\n",
            "2.3068217051029207\n",
            "2.203134548664093\n",
            "2.0161552834510803\n",
            "2.000677064657211\n",
            "1.9951183521747589\n",
            "1.9717088222503663\n",
            "1.9994603991508484\n",
            "1.895041674375534\n",
            "1.8954807257652282\n",
            "1.9302911639213562\n",
            "1.9902560126781463\n",
            "1.9346016252040863\n",
            "1.9193639624118806\n",
            "1.9487190759181976\n",
            "2.0088925433158873\n",
            "1.927469756603241\n",
            "1.946274631023407\n",
            "1.9729765927791596\n",
            "1.968670779466629\n",
            "2.0052362883090975\n",
            "1.9188868641853332\n",
            "1.996767567396164\n",
            "1.994935222864151\n",
            "1.9706776762008666\n",
            "2.0607704269886016\n",
            "1.947084640264511\n",
            "1.9751121640205382\n",
            "1.9793908631801604\n",
            "1.9566588699817657\n",
            "1.9521882164478301\n",
            "1.9230807650089263\n",
            "1.9846274757385254\n",
            "1.9996617877483367\n",
            "1.9476563131809235\n",
            "1.9474779438972474\n",
            "1.974856606721878\n",
            "2.0035298717021943\n",
            "2.016447936296463\n",
            "2.042523009777069\n",
            "2.004511570930481\n",
            "1.9684906017780304\n",
            "1.9987618482112885\n",
            "2.031538494825363\n",
            "2.0274713587760926\n",
            "2.036148122549057\n",
            "1.9753546226024628\n",
            "1.994578068256378\n",
            "2.0149461996555327\n",
            "1.9593515169620515\n",
            "1.9864366245269776\n",
            "2.0153355383872986\n",
            "2.014641171693802\n",
            "2.02471329331398\n",
            "2.009457372426987\n",
            "2.0633424818515778\n",
            "2.060734989643097\n",
            "2.033100609779358\n",
            "1.9807500386238097\n",
            "2.0162725436687468\n",
            "1.9600874483585358\n",
            "2.085991027355194\n",
            "2.0166730737686156\n",
            "2.0716077733039855\n",
            "1.9285312688350678\n",
            "1.9537378680706023\n",
            "2.0967341613769532\n",
            "1.9863386499881743\n",
            "2.016522616147995\n",
            "2.048573622703552\n",
            "2.005737863779068\n",
            "2.0340695190429687\n",
            "2.016759387254715\n",
            "2.0207557773590086\n",
            "2.0392952191829683\n",
            "1.9548762345314026\n",
            "1.9661734771728516\n",
            "1.9420148420333863\n",
            "2.0746142411231996\n",
            "2.044559291601181\n",
            "2.0399645340442656\n",
            "1.9769731760025024\n",
            "2.099226233959198\n",
            "1.9343206346035005\n",
            "2.031132630109787\n",
            "1.9358917117118835\n",
            "2.072793757915497\n",
            "2.085976892709732\n",
            "1.9838757085800172\n",
            "2.1229170966148376\n",
            "1.95419713139534\n",
            "2.035034346580505\n",
            "2.127723219394684\n",
            "1.9707805287837983\n",
            "1.951449316740036\n",
            "2.0030396437644957\n",
            "1.975551186800003\n",
            "2.201391701698303\n",
            "2.1349158680438993\n",
            "2.035040671825409\n",
            "1.9325976431369782\n",
            "2.0487199568748475\n",
            "2.068727287054062\n",
            "2.0140464448928834\n",
            "2.150389860868454\n",
            "2.135743510723114\n",
            "2.1797091913223268\n",
            "1.9587440443038941\n",
            "1.9862989974021912\n",
            "2.159244009256363\n",
            "1.9632106304168702\n",
            "1.983268290758133\n",
            "2.0409751522541044\n",
            "2.140112718343735\n",
            "2.123063008785248\n",
            "2.1676903772354126\n",
            "1.9947882723808288\n",
            "1.9633572387695313\n",
            "2.154600820541382\n",
            "2.1548198926448823\n",
            "1.8409337067604066\n",
            "2.045552912950516\n",
            "2.080368013381958\n",
            "2.3208657872676848\n",
            "2.1368465781211854\n",
            "2.2114033639431\n",
            "1.9257817244529725\n",
            "1.9580418789386749\n",
            "2.037150431871414\n",
            "2.0172758078575135\n",
            "2.217330029010773\n",
            "1.8894904601573943\n",
            "1.8520292782783507\n",
            "2.0800856697559356\n",
            "1.9932429683208466\n",
            "2.2401318979263305\n",
            "2.0222040367126466\n",
            "2.1965529954433443\n",
            "2.2523701906204225\n",
            "2.1548760652542116\n",
            "1.9170101857185364\n",
            "2.0015405201911927\n",
            "1.9712457871437072\n",
            "2.0152654504776\n",
            "2.1541497182846068\n",
            "2.4040630674362182\n",
            "2.0248107182979584\n",
            "1.8569501626491547\n",
            "1.8798572325706482\n",
            "2.0190714728832244\n",
            "2.0730363535881042\n",
            "2.0091233396530153\n",
            "2.090318100452423\n",
            "2.267715014219284\n",
            "2.1034798419475553\n",
            "2.1303080904483793\n",
            "2.1744889068603515\n",
            "2.0530731666088102\n",
            "2.092504868507385\n",
            "1.8977578580379486\n",
            "1.961795415878296\n",
            "2.003140312433243\n",
            "1.9431076514720917\n",
            "1.9534503996372223\n",
            "2.0494788098335266\n",
            "2.2241084122657777\n",
            "2.2105458438396455\n",
            "1.9628077018260957\n",
            "1.8507934427261352\n",
            "1.9059483778476716\n",
            "1.8017384362220765\n",
            "2.1230611300468443\n",
            "2.066568250656128\n",
            "1.7826606380939483\n",
            "2.0602163422107695\n",
            "2.224828290939331\n",
            "2.295309845209122\n",
            "2.1754486536979676\n",
            "2.051311334371567\n",
            "2.1329642653465273\n",
            "2.2237769389152526\n",
            "2.157557998895645\n",
            "2.178899199962616\n",
            "2.157695484161377\n",
            "2.101822377443314\n",
            "2.163254599571228\n",
            "2.1801061987876893\n",
            "2.097678459882736\n",
            "2.1642948496341705\n",
            "2.1565173399448394\n",
            "2.1854718637466433\n",
            "2.189200681447983\n",
            "2.1919576740264892\n",
            "2.20582506775856\n",
            "2.1227757263183595\n",
            "2.1090016520023345\n",
            "2.090347459316254\n",
            "2.1119827389717103\n",
            "2.09902574300766\n",
            "2.1549436235427857\n",
            "2.1629927003383638\n",
            "2.1870498299598693\n",
            "2.2164915478229523\n",
            "2.201510112285614\n",
            "2.1580135440826416\n",
            "2.225343782901764\n",
            "2.1464360189437866\n",
            "2.1603059720993043\n",
            "2.172765613794327\n",
            "2.1230133032798766\n",
            "2.113970025777817\n",
            "2.0254281651973725\n",
            "2.1592256700992585\n",
            "2.170490381717682\n",
            "2.1363368606567383\n",
            "2.189707680940628\n",
            "2.137334314584732\n",
            "2.180791561603546\n",
            "2.20984996676445\n",
            "2.170568279027939\n",
            "2.223702144622803\n",
            "2.157749490737915\n",
            "2.280905156135559\n",
            "2.09593581199646\n",
            "2.1251358866691588\n",
            "2.2251758790016174\n",
            "2.1870495891571045\n",
            "2.136735943555832\n",
            "2.172775546312332\n",
            "2.320487412214279\n",
            "2.2494130504131316\n",
            "2.079435535669327\n",
            "2.24496595621109\n",
            "2.203116396665573\n",
            "2.2119399273395537\n",
            "2.147201180458069\n",
            "2.2060670816898345\n",
            "2.2177224695682525\n",
            "2.1881976854801177\n",
            "2.247886655330658\n",
            "2.222300047874451\n",
            "2.2144889962673187\n",
            "2.1523090195655823\n",
            "2.188128377199173\n",
            "2.2765868854522706\n",
            "2.231109231710434\n",
            "2.2736129891872405\n",
            "2.278514609336853\n",
            "2.2858870470523835\n",
            "2.107437472343445\n",
            "2.209482477903366\n",
            "2.2258062839508055\n",
            "2.24097109913826\n",
            "2.108751312494278\n",
            "2.1871836376190186\n",
            "1.9959209537506104\n",
            "2.335924106836319\n",
            "2.3581012868881226\n",
            "2.2178672587871553\n",
            "2.2994559168815614\n",
            "2.0542687129974366\n",
            "2.324353621006012\n",
            "2.358226628303528\n",
            "2.2851448702812194\n",
            "2.053659279346466\n",
            "2.3443940150737763\n",
            "2.0209708404541016\n",
            "2.2538986337184905\n",
            "2.2485575568675995\n",
            "2.3775122034549714\n",
            "2.2718246734142302\n",
            "2.10780521273613\n",
            "2.245673521757126\n",
            "1.9944098579883576\n",
            "2.1032248950004577\n",
            "2.291915100812912\n",
            "2.309490427970886\n",
            "2.322040252685547\n",
            "2.3402523696422577\n",
            "2.2075914454460146\n",
            "2.0604111170768737\n",
            "2.312314044237137\n",
            "2.241956136226654\n",
            "2.170236876010895\n",
            "2.21874663233757\n",
            "2.2719324696063996\n",
            "2.3523669278621675\n",
            "2.2187850296497347\n",
            "2.2562443017959595\n",
            "2.2843690419197085\n",
            "2.211603126525879\n",
            "2.1716958153247834\n",
            "2.0595344042778017\n",
            "2.333763793706894\n",
            "2.3274152624607085\n",
            "1.96079278588295\n",
            "2.01859427690506\n",
            "2.2945730340480806\n",
            "2.2133093905448913\n",
            "2.425737990140915\n",
            "2.303010816574097\n",
            "2.2427451395988465\n",
            "2.3135580909252167\n",
            "2.476403822898865\n",
            "2.127320011854172\n",
            "2.214579477310181\n",
            "2.1767051255702974\n",
            "1.9995314586162567\n",
            "2.288772736787796\n",
            "2.383416637182236\n",
            "2.385368614196777\n",
            "1.9614286410808563\n",
            "2.0776830768585204\n",
            "1.995329327583313\n",
            "2.231305000782013\n",
            "2.2883418023586275\n",
            "2.340008976459503\n",
            "2.4366331708431246\n",
            "2.2690582811832427\n",
            "2.2660143160820008\n",
            "2.1148117756843567\n",
            "2.3623707127571105\n",
            "2.1929784655570983\n",
            "2.019157042503357\n",
            "1.9762067461013795\n",
            "1.9621996259689332\n",
            "1.940205487012863\n",
            "1.9486649572849273\n",
            "1.8867904293537139\n",
            "1.8806415450572969\n",
            "1.9092444944381715\n",
            "1.9275783848762513\n",
            "1.9253556001186372\n",
            "1.9161994910240174\n",
            "1.878857729434967\n",
            "1.9731840884685516\n",
            "1.923397696018219\n",
            "1.903715603351593\n",
            "1.9154813182353974\n",
            "1.9651300919055938\n",
            "1.972082703113556\n",
            "1.96499476313591\n",
            "1.9065668749809266\n",
            "1.9717217671871186\n",
            "1.932773710489273\n",
            "1.9865680503845216\n",
            "2.0129266023635863\n",
            "1.9228661608695985\n",
            "1.9398067307472229\n",
            "1.9326291263103486\n",
            "1.9162990951538086\n",
            "1.9214714562892914\n",
            "1.940419715642929\n",
            "1.9723604333400726\n",
            "1.9326877295970917\n",
            "1.9453492403030395\n",
            "1.9312121427059175\n",
            "1.9936286473274232\n",
            "1.9656682324409485\n",
            "1.9986864840984344\n",
            "1.9622566950321199\n",
            "2.0001472783088685\n",
            "1.9230515241622925\n",
            "1.9866288137435912\n",
            "1.9837243461608887\n",
            "2.074931608438492\n",
            "1.9781473398208618\n",
            "1.9871669971942902\n",
            "1.9539498972892761\n",
            "1.945568505525589\n",
            "1.958268505334854\n",
            "2.0367290604114534\n",
            "1.924228835105896\n",
            "2.0420256543159483\n",
            "1.9739263248443604\n",
            "2.0077510356903074\n",
            "2.0281306767463683\n",
            "2.027577612400055\n",
            "2.02058119058609\n",
            "1.9251483058929444\n",
            "1.9805288434028625\n",
            "2.039643374681473\n",
            "2.014420793056488\n",
            "1.9658491909503937\n",
            "2.025191398859024\n",
            "1.889603511095047\n",
            "2.0516483688354494\n",
            "1.9001542258262634\n",
            "2.028234816789627\n",
            "2.070286822319031\n",
            "1.989314945936203\n",
            "1.9590615355968475\n",
            "2.0867899405956267\n",
            "1.985359719991684\n",
            "1.938153533935547\n",
            "2.0041479516029357\n",
            "1.9669462585449218\n",
            "1.8678145182132722\n",
            "2.0371240437030793\n",
            "2.075305036306381\n",
            "2.0440041494369505\n",
            "1.880901198387146\n",
            "2.0919636583328245\n",
            "1.945449800491333\n",
            "1.9930797970294953\n",
            "1.914872853755951\n",
            "2.0088472831249238\n",
            "2.150763832330704\n",
            "1.925648831129074\n",
            "2.080071623325348\n",
            "1.9192583322525025\n",
            "2.043324688673019\n",
            "2.1024660515785216\n",
            "1.9287660360336303\n",
            "1.9698965406417848\n",
            "1.9742749273777007\n",
            "1.9393584334850311\n",
            "2.0029679489135743\n",
            "2.2559306848049165\n",
            "2.1294105076789855\n",
            "1.8460213708877564\n",
            "1.9638514971733094\n",
            "2.083745695352554\n",
            "1.9478514671325684\n",
            "2.0967845582962035\n",
            "2.1559697592258456\n",
            "2.1965766072273256\n",
            "1.9727479362487792\n",
            "1.9564848852157593\n",
            "2.0264712142944337\n",
            "2.104581973552704\n",
            "1.891119179725647\n",
            "2.022424603700638\n",
            "2.0928721606731413\n",
            "2.0631698346138\n",
            "2.2090896117687224\n",
            "1.9952364003658294\n",
            "2.0297110366821287\n",
            "1.973590613603592\n",
            "2.2597057116031647\n",
            "1.8384524762630463\n",
            "1.9478561401367187\n",
            "2.046106868982315\n",
            "2.2637271320819856\n",
            "2.1371614110469817\n",
            "2.1196663296222686\n",
            "2.0714035344123842\n",
            "1.9174310410022735\n",
            "1.999568268060684\n",
            "2.0323324942588807\n",
            "2.0776426124572756\n",
            "1.9863721299171448\n",
            "1.8725630176067352\n",
            "1.96299098610878\n",
            "2.037217775583267\n",
            "2.119580911397934\n",
            "2.094547909498215\n",
            "2.074838492870331\n",
            "2.2649736332893373\n",
            "2.213528881072998\n",
            "1.9125766885280608\n",
            "1.9127706742286683\n",
            "1.9852033460140228\n",
            "2.0107536554336547\n",
            "2.071756064891815\n",
            "2.3661769604682923\n",
            "2.2151577067375183\n",
            "1.789995595216751\n",
            "1.8908394587039947\n",
            "1.908046587705612\n",
            "2.099575262069702\n",
            "1.9430347096920013\n",
            "2.0367711317539214\n",
            "2.249746904373169\n",
            "2.141601814031601\n",
            "2.089851006269455\n",
            "2.1043574273586274\n",
            "2.1032597184181214\n",
            "2.0759427869319915\n",
            "1.9104834926128387\n",
            "1.9382849144935608\n",
            "1.8850602304935455\n",
            "2.008825079202652\n",
            "1.9884228682518006\n",
            "2.035042107105255\n",
            "2.0057165634632113\n",
            "2.27994224190712\n",
            "2.116583625078201\n",
            "1.822981253862381\n",
            "1.878623391389847\n",
            "1.7391750633716583\n",
            "2.0731163585186003\n",
            "2.054410358667374\n",
            "1.8504061007499695\n",
            "1.9317741703987121\n",
            "2.1942227721214294\n",
            "2.2813748490810393\n",
            "2.200841861963272\n",
            "2.00460782289505\n",
            "2.1419467973709105\n",
            "2.1360203659534456\n",
            "2.253528242111206\n",
            "2.0718992030620575\n",
            "2.0938680601119994\n",
            "2.1373840963840482\n",
            "2.100087643861771\n",
            "2.147562922239304\n",
            "2.1327120101451875\n",
            "2.084224579334259\n",
            "2.1074649012088775\n",
            "2.1293570971488953\n",
            "2.165197378396988\n",
            "2.1627373719215393\n",
            "2.2063427424430846\n",
            "2.140404448509216\n",
            "2.076303108930588\n",
            "2.05587006688118\n",
            "2.104647067785263\n",
            "2.025968930721283\n",
            "2.136814850568771\n",
            "2.1088721597194673\n",
            "2.1832618987560273\n",
            "2.125417865514755\n",
            "2.2197645246982574\n",
            "2.192275115251541\n",
            "2.1331294548511504\n",
            "2.1736987221240995\n",
            "2.151146241426468\n",
            "2.0744664776325226\n",
            "2.174643681049347\n",
            "2.0702117240428923\n",
            "2.0222588193416597\n",
            "2.0946515047550203\n",
            "2.1244803881645202\n",
            "2.1698537921905516\n",
            "2.102669404745102\n",
            "2.1681387782096864\n",
            "2.120320714712143\n",
            "2.1615740132331847\n",
            "2.1998229014873503\n",
            "2.135731638669968\n",
            "2.147905719280243\n",
            "2.2425731587409974\n",
            "2.078136430978775\n",
            "2.1978845298290253\n",
            "2.1614179790019987\n",
            "2.133933379650116\n",
            "2.1304670119285585\n",
            "2.13540452003479\n",
            "2.2490146160125732\n",
            "2.2637593293190004\n",
            "2.1457034873962404\n",
            "2.1769777393341063\n",
            "2.1998039090633394\n",
            "2.174745041131973\n",
            "2.1757536697387696\n",
            "2.1372805857658386\n",
            "2.181622084379196\n",
            "2.1279840803146364\n",
            "2.3095758616924287\n",
            "2.217929379940033\n",
            "2.110506525039673\n",
            "2.2380976104736328\n",
            "2.1185731983184812\n",
            "2.2191855347156526\n",
            "2.207063283920288\n",
            "2.2593539118766786\n",
            "2.211042466163635\n",
            "2.269757515192032\n",
            "2.213818188905716\n",
            "2.154487909078598\n",
            "2.111149525642395\n",
            "2.2662770998477937\n",
            "2.154280252456665\n",
            "2.1207614648342132\n",
            "2.024975836277008\n",
            "2.2497096621990202\n",
            "2.2989381694793702\n",
            "2.323266454935074\n",
            "2.1697950446605683\n",
            "2.1281519103050233\n",
            "2.2037648296356203\n",
            "2.3213370668888094\n",
            "2.322649416923523\n",
            "2.1087784588336946\n",
            "2.2197273755073548\n",
            "2.1492839992046355\n",
            "2.128084888458252\n",
            "2.235227414369583\n",
            "2.3410162389278413\n",
            "2.2969192278385164\n",
            "2.091529711484909\n",
            "2.165161657333374\n",
            "2.0853088235855104\n",
            "1.9947777795791626\n",
            "2.2596952962875365\n",
            "2.2757049679756163\n",
            "2.2716491556167604\n",
            "2.4000241029262543\n",
            "2.2501976346969603\n",
            "2.0466120505332945\n",
            "2.1735902309417723\n",
            "2.3691444754600526\n",
            "2.1390679705142976\n",
            "2.078253720998764\n",
            "2.242560613155365\n",
            "2.413167406320572\n",
            "2.17952631354332\n",
            "2.1990052890777587\n",
            "2.283497769832611\n",
            "2.2305745947360993\n",
            "2.1819348514080046\n",
            "2.0524825370311737\n",
            "2.2188705444335937\n",
            "2.364607048034668\n",
            "1.995427393913269\n",
            "2.0761414122581483\n",
            "2.149063518047333\n",
            "2.193011598587036\n",
            "2.411321952342987\n",
            "2.2591922974586485\n",
            "2.209967648983002\n",
            "2.365125998258591\n",
            "2.403581099510193\n",
            "2.2031376755237577\n",
            "2.2018644189834595\n",
            "2.0895027720928194\n",
            "2.0789918947219848\n",
            "2.1704192304611207\n",
            "2.3673063242435455\n",
            "2.4154737901687624\n",
            "1.955590122938156\n",
            "2.046051882505417\n",
            "2.0596077036857605\n",
            "2.0956529533863066\n",
            "2.308967502117157\n",
            "2.3183184266090393\n",
            "2.412278928756714\n",
            "2.180276024341583\n",
            "2.3126667881011964\n",
            "2.100775830745697\n",
            "2.4173910570144654\n"
          ]
        }
      ],
      "source": [
        "total_loss = 0\n",
        "total_ct = 0\n",
        "total_epochs = 5\n",
        "\n",
        "for _ in range(total_epochs):\n",
        "    for name in open('/content/names.txt', 'r'):\n",
        "        name = name.lower().strip()\n",
        "        # Add the start and end padding token\n",
        "        name = '.' + name + '.'\n",
        "        # name[:-1]\n",
        "        x_data = [stoi[ch] for ch in name[:-1]]\n",
        "        # name[1:]\n",
        "        y_data = [stoi[ch] for ch in name[1:]]\n",
        "        logits = []\n",
        "        # Set the hidden state to random\n",
        "        h = torch.zeros(1, d_h)\n",
        "        # Zero the grad\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # Loop through each token and get the new h and then pass it forward\n",
        "        # Accumulate all the logits\n",
        "        for x in x_data:\n",
        "            x = torch.tensor([x])\n",
        "            log, h = model(x, h)\n",
        "            logits.append(log)\n",
        "\n",
        "        # Put all the logits into one tensor\n",
        "        logits = torch.cat(logits, dim=0)\n",
        "        y_data = torch.tensor(y_data, dtype=torch.long)\n",
        "\n",
        "        # Compute the loss\n",
        "        loss = nn.CrossEntropyLoss()(logits, y_data)\n",
        "\n",
        "        # Get the new gradient\n",
        "        loss.backward()\n",
        "\n",
        "        # Clip the gradients at max norm 0.1\n",
        "        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=0.1)\n",
        "\n",
        "        # Do a gradient update\n",
        "        optimizer.step()\n",
        "\n",
        "        # Get the loss for the batch and get the number of batches\n",
        "        total_loss += loss.item()\n",
        "        total_ct += 1\n",
        "\n",
        "        if total_ct and total_ct % 100 == 0:\n",
        "            print(total_loss / total_ct)\n",
        "            total_loss = 0\n",
        "            total_ct = 0\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "id": "83f5f990",
      "metadata": {
        "id": "83f5f990",
        "outputId": "984d62b8-e7b3-4377-9688-b0329ffa3d0a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Preplexity:  9.501029014587402\n"
          ]
        }
      ],
      "source": [
        "with torch.no_grad():\n",
        "    # Get perplexity\n",
        "    sumneglogp = 0\n",
        "    T = 0\n",
        "    for name in open('/content/names.txt', 'r'):\n",
        "        name = name.lower().strip()\n",
        "        T += len(name) + 1\n",
        "        name = '.' + name + '.'\n",
        "        # Get the name from index 0 to -1 exclusive end\n",
        "        x_data = [stoi[ch] for ch in name[:-1]]\n",
        "        # Get the y from index 1 to end inclusive end\n",
        "        y_data = [stoi[ch] for ch in name[1:]]\n",
        "        # logits per token prediction\n",
        "        logits = []\n",
        "        # Initialize the h vector to random\n",
        "        h = torch.zeros(1, d_h)\n",
        "        # Loop over each chracter in the name and pass h and this into the RNN\n",
        "        # Get the new logit\n",
        "        for x in x_data:\n",
        "            # Get the int for x\n",
        "            x = torch.tensor([x])\n",
        "            # Get z and h\n",
        "            z, h = model(x, h)\n",
        "            # Append to logit\n",
        "            logits.append(z)\n",
        "\n",
        "        # Get all the logits for each character\n",
        "        logits = torch.cat(logits, dim=0)\n",
        "        y_data = torch.tensor(y_data, dtype=torch.long)\n",
        "\n",
        "        # Compute the loss across all characters\n",
        "        loss = F.cross_entropy(logits, y_data, reduction='sum')\n",
        "\n",
        "        # Change to log base 2\n",
        "        # log2(x) = ln(x) / ln(2)\n",
        "        loss *= (1 / math.log(2))\n",
        "\n",
        "        sumneglogp += loss.clone()\n",
        "\n",
        "    # sumneglogp is -log(p('.' + name1)) -log(p('.' + name2)) -log(p('.' + name3)) ...\n",
        "    # Divide by the appropriate term to get the answer we want\n",
        "    print('Preplexity: ', torch.pow(2, sumneglogp.clone().detach() / T).item())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "id": "7608536d",
      "metadata": {
        "id": "7608536d",
        "outputId": "d90558bd-22dc-49a5-fc68-dc519ee0c993",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Generated name:  wiysier\n"
          ]
        }
      ],
      "source": [
        "# Generate a random word using this distributon\n",
        "# Intialize the word with\n",
        "name = '.'\n",
        "# Initialize h to random\n",
        "h = torch.zeros(1, d_h)\n",
        "while True:\n",
        "    # Make c to an integer\n",
        "    c = stoi[name[-1]]\n",
        "    c = torch.tensor([c])\n",
        "    # Make the distribution from c to any other word other than START\n",
        "    logits, h = model(c, h)\n",
        "    # Get p; use Softmax\n",
        "    p = torch.softmax(logits, dim=-1).squeeze()\n",
        "    # Sample from p\n",
        "    c = torch.multinomial(p, 1)\n",
        "    # If we generate '.', stop\n",
        "    if c.item() == 0:\n",
        "        break\n",
        "    else:\n",
        "        name += itos[c.item()]\n",
        "print('Generated name: ' , name[1:])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4d790024",
      "metadata": {
        "id": "4d790024"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.15"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
